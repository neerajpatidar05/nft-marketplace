{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport marketplaceabi from 'abi/marketplace.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      const fetchNFTs = async Metamaskaddress => {\n        try {\n          const marketplaceaddress = '0xf43E9272E7c505d658cAC2c07Ee551f3dDF18Ac0';\n          const address = '0x5C28F4E71005CedB42263C26A785B50DbAa51b73';\n          const contractabi = abi.abi;\n          const {\n            ethereum\n          } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi, signer);\n          const marketplacecontractabi = marketplaceabi.abi;\n          const marketplaceContract = new ethers.Contract(marketplaceaddress, marketplacecontractabi, signer);\n          console.log(contractss, \"contract object\");\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress);\n          const getSuccessfullyBoughtTokens = await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken = [];\n          if (getSuccessfullyBoughtTokens.length !== 0) {\n            for (let i = 0; i < getSuccessfullyBoughtTokens.length; i++) {\n              tokenUriOfBoughtToken[i] = await contractss.tokenURI(getSuccessfullyBoughtTokens[i]);\n            }\n          }\n          // const combinedTokenURIs = [...tokenURIs, ...tokenUriOfBoughtToken];\n          const combinedTokenURIsSet = new Set([...tokenURIs, ...tokenUriOfBoughtToken]);\n          console.log(tokenURIs, \"tokenurissssssssssssssssssssssss\");\n          // if (combinedTokenURIs !== null) {\n          //   // Filter out empty strings from tokenURIs array\n          //  // const filteredTokenURIs = tokenURIs.filter(uri => uri !== '');\n          //  const filteredTokenURIs = combinedTokenURIs.filter(uri => uri !== '');\n          //   if (filteredTokenURIs.length === 0) {\n          //     console.log(\"All tokenURIs are empty strings, skipping setNFTs()\");\n          //   } else {\n          //     console.log(filteredTokenURIs, \"tokenuri from profile\");\n          //     setNFTs(filteredTokenURIs);\n          //   }\n          // }\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          console.log(address, \"metamask address\");\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        src: tokenURI.image,\n        alt: `NFT ${tokenURI}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          children: \"NFT Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"NFT Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/listnftforsale\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"List NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","useEffect","Web3","Card","CardMedia","CardContent","Typography","Link","marketplaceabi","jsxDEV","_jsxDEV","Profile","_s","nfts","setNFTs","apiData","fetchNFTs","Metamaskaddress","marketplaceaddress","address","contractabi","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contractss","Contract","marketplacecontractabi","marketplaceContract","console","log","tokenURIs","getOwnedNFTs","getSuccessfullyBoughtTokens","tokenUriOfBoughtToken","length","i","tokenURI","combinedTokenURIsSet","Set","error","enable","web3","accounts","eth","getAccounts","children","map","index","component","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","to","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState ,useEffect} from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport marketplaceabi from 'abi/marketplace.json'\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n  useEffect(()=>{\n    const  apiData = async() => {\n      const fetchNFTs = async (Metamaskaddress) => {\n        try {\n          const marketplaceaddress='0xf43E9272E7c505d658cAC2c07Ee551f3dDF18Ac0';\n          const address = '0x5C28F4E71005CedB42263C26A785B50DbAa51b73';\n          const contractabi = abi.abi;\n          const { ethereum } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi,signer);\n          const marketplacecontractabi = marketplaceabi.abi;\n          const marketplaceContract=new ethers.Contract(marketplaceaddress, marketplacecontractabi,signer);\n          console.log(contractss,\"contract object\");\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n          const getSuccessfullyBoughtTokens= await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken=[];\n          if(getSuccessfullyBoughtTokens.length!==0){\n            for(let i=0;i<getSuccessfullyBoughtTokens.length;i++){\n             tokenUriOfBoughtToken[i]= await contractss.tokenURI(getSuccessfullyBoughtTokens[i])\n            }\n          }\n          // const combinedTokenURIs = [...tokenURIs, ...tokenUriOfBoughtToken];\n          const combinedTokenURIsSet = new Set([...tokenURIs, ...tokenUriOfBoughtToken]);\n\n          console.log(tokenURIs,\"tokenurissssssssssssssssssssssss\");  \n          // if (combinedTokenURIs !== null) {\n          //   // Filter out empty strings from tokenURIs array\n          //  // const filteredTokenURIs = tokenURIs.filter(uri => uri !== '');\n          //  const filteredTokenURIs = combinedTokenURIs.filter(uri => uri !== '');\n          //   if (filteredTokenURIs.length === 0) {\n          //     console.log(\"All tokenURIs are empty strings, skipping setNFTs()\");\n          //   } else {\n          //     console.log(filteredTokenURIs, \"tokenuri from profile\");\n          //     setNFTs(filteredTokenURIs);\n          //   }\n          // }\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                console.log(address,\"metamask address\");\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n    };\n    apiData()\n  },[])\n \n  return (\n    <div>\n      {/* <button onClick={connectToMetamask}>Connect to Metamask</button> */}\n      \n        {nfts.map((tokenURI, index) => (\n          <Card key={index}>\n            {/* Display NFT image */}\n            <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${tokenURI}`} />\n{/* {console.log(tokenURI.image)} */}\n            <CardContent>\n              {/* Display NFT details */}\n              <Typography variant=\"h5\" component=\"div\">\n                NFT Title\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n              NFT Description\n              </Typography>\n              <Link to='/listnftforsale'>\n              <button >List NFT</button>\n              </Link>\n            </CardContent>\n          </Card>\n        ))}\n      </div> \n  );\n};\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}