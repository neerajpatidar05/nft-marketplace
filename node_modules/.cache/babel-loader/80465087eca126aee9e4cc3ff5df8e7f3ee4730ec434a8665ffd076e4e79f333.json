{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/NftLists.js\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Box, Grid, styled } from '@mui/material';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport NFTCard from './NftCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardBody = styled(Box)(() => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `);\n_c = CardBody;\nconst Body = styled(Card)(() => `\n  width:20%;\n  margin-bottom:2%;\n  cursor:pointer;\n  border: 1px solid;\n  box-shadow: 5px 4px #342929;\n  border-radius: 6%;\n\n\n}\n  `);\n_c2 = Body;\nfunction NftLists(props) {\n  _s();\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [Page, setPage] = useState(4);\n  const {\n    testdata\n  } = props;\n  // console.log(testdata.length)\n\n  // useEffect(()=>{\n  //   const  apiData = async() => {\n  //     console.log(\"call\")\n  //    const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n  //     const jsonData = await response.json();\n  //     console.log(jsonData) \n  //     setData(jsonData.data)\n\n  //   };\n  //   apiData()\n  // },[])\n\n  useEffect(() => {\n    const apiData = async () => {\n      const fetchNFTs = async Metamaskaddress => {\n        try {\n          const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n          const contractabi = abi.abi;\n          const {\n            ethereum\n          } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi, signer);\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress);\n          setNFTs(tokenURIs);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  const fetchMoreData = async () => {\n    setPage(Page + 1);\n    const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n    const jsonData = await response.json();\n    setData(jsonData.data);\n    setData(data.concat(jsonData.data));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: data === null || data === void 0 ? void 0 : data.length,\n      next: fetchMoreData,\n      hasMore: true,\n      loader: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }, this),\n      children: [console.log(\"data\", data), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: data === null || data === void 0 ? void 0 : data.map(d => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Body, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/details\",\n                state: {\n                  d: d\n                },\n                children: /*#__PURE__*/_jsxDEV(NFTCard, {\n                  data: d\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 16\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n_s(NftLists, \"Z/8YTSn6izYTNscHbmok7GFdLEg=\", false, function () {\n  return [useNavigate];\n});\n_c3 = NftLists;\nexport default NftLists;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CardBody\");\n$RefreshReg$(_c2, \"Body\");\n$RefreshReg$(_c3, \"NftLists\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardActions","CardContent","CardMedia","Button","Typography","Box","Grid","styled","Link","useNavigate","InfiniteScroll","NFTCard","jsxDEV","_jsxDEV","Fragment","_Fragment","CardBody","_c","Body","_c2","NftLists","props","_s","navigate","data","setData","Page","setPage","testdata","apiData","fetchNFTs","Metamaskaddress","address","contractabi","abi","ethereum","window","provider","ethers","providers","Web3Provider","signer","getSigner","contractss","Contract","tokenURIs","getOwnedNFTs","setNFTs","error","console","enable","web3","Web3","accounts","eth","getAccounts","fetchMoreData","response","fetch","jsonData","json","concat","children","dataLength","length","next","hasMore","loader","fileName","_jsxFileName","lineNumber","columnNumber","log","map","d","to","state","_c3","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/NftLists.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport CardMedia from '@mui/material/CardMedia'\nimport Button from '@mui/material/Button'\nimport Typography from '@mui/material/Typography'\nimport { Box, Grid, styled } from '@mui/material'\nimport { Link, useNavigate } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport NFTCard from './NftCard'\n\nconst CardBody = styled(Box)(\n  () => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `,\n)\n\nconst Body = styled(Card)(\n  () => `\n  width:20%;\n  margin-bottom:2%;\n  cursor:pointer;\n  border: 1px solid;\n  box-shadow: 5px 4px #342929;\n  border-radius: 6%;\n\n\n}\n  `,\n)\n\nfunction NftLists(props) {\n  const navigate = useNavigate();\n  const [data,setData]=useState([])\n  const [Page,setPage]=useState(4)\n\n\n\n  const { testdata } = props\n  // console.log(testdata.length)\n\n  // useEffect(()=>{\n  //   const  apiData = async() => {\n  //     console.log(\"call\")\n  //    const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n  //     const jsonData = await response.json();\n  //     console.log(jsonData) \n  //     setData(jsonData.data)\n\n  //   };\n  //   apiData()\n  // },[])\n\n  useEffect(()=>{\n    const  apiData = async() => {\n      const fetchNFTs = async (Metamaskaddress) => {\n        try {\n          const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n          const contractabi = abi.abi;\n          const { ethereum } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi,signer);\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n          setNFTs(tokenURIs);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n\n\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n\n           \n    };\n    apiData()\n  },[])\n  const  fetchMoreData = async() => {\n      setPage(Page +1)\n      const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n      const jsonData = await response.json();\n      setData(jsonData.data)\n      setData(data.concat(jsonData.data))\n   \n  };\n  return (\n    <>\n     <InfiniteScroll\n          dataLength={data?.length}\n          next={fetchMoreData}\n          hasMore={true}\n          loader={<h4>Loading...</h4>}\n        >\n  \n    {console.log(\"data\",data)}\n      <CardBody>\n        {data?.map((d) => {\n          return (\n            <>\n            \n              <Body >\n              <Link to=\"/details\" state={{ d: d }}>\n               <NFTCard data={d}/>\n                </Link>\n              </Body>\n          \n            \n            </>\n          )\n        })}\n      </CardBody>\n\n      </InfiniteScroll>\n    </>\n  )\n}\n\nexport default NftLists\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}