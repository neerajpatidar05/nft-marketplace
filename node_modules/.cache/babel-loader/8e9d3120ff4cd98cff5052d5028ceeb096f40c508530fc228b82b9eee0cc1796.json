{"ast":null,"code":"import _regeneratorRuntime from\"/home/neeraj/Documents/logistic/NFT_F/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/home/neeraj/Documents/logistic/NFT_F/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/neeraj/Documents/logistic/NFT_F/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/* eslint-disable react-hooks/exhaustive-deps */import React,{useEffect,useState}from'react';import Card from'@mui/material/Card';import{Box,styled}from'@mui/material';import{Link}from\"react-router-dom\";import NFTCard from'./NftCard';import Web3 from'web3';import{marketplaceContract}from'web3config/web3config';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var CardBody=styled(Box)(function(){return\"\\n  \\n    margin: 30px 100px;\\n    width: 100%;\\n    display: flex;\\n    flex-wrap: wrap;\\n    gap:2.5%;\\n\\n}\\n  \";});var Body=styled(Card)(function(){return\"\\n  width:20%;\\n  margin-bottom:2%;\\n  cursor:pointer;\\n  border: 1px solid;\\n  box-shadow: 5px 4px #342929;\\n  border-radius: 6%;\\n\\n\\n}\\n  \";});function NftLists(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),nfts=_useState2[0],setNFTs=_useState2[1];useEffect(function(){var apiData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var fetchNFTs,web3,accounts,address;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:fetchNFTs=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var tokenURIs,filteredTokenURIs;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return marketplaceContract.getListedTokens();case 3:tokenURIs=_context.sent;console.log(tokenURIs.length,\"length\");console.log(tokenURIs,\"pure tokenuris\");filteredTokenURIs=tokenURIs.filter(function(tokenURI){return tokenURI.seller!=='0x0000000000000000000000000000000000000000';});console.log(filteredTokenURIs,\"filtertokenuris\");setNFTs(filteredTokenURIs);_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);console.error('Error fetching NFTs:',_context.t0);case 14:case\"end\":return _context.stop();}},_callee,null,[[0,11]]);}));return function fetchNFTs(){return _ref2.apply(this,arguments);};}();if(!(typeof window.ethereum!=='undefined')){_context2.next=18;break;}_context2.prev=2;_context2.next=5;return window.ethereum.enable();case 5:web3=new Web3(window.ethereum);_context2.next=8;return web3.eth.getAccounts();case 8:accounts=_context2.sent;address=accounts[0];fetchNFTs(address);_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](2);console.error('Error connecting to Metamask:',_context2.t0);case 16:_context2.next=19;break;case 18:console.error('Metamask is not installed');case 19:case\"end\":return _context2.stop();}},_callee2,null,[[2,13]]);}));return function apiData(){return _ref.apply(this,arguments);};}();apiData();},[]);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(CardBody,{children:nfts===null||nfts===void 0?void 0:nfts.map(function(d){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(Body,{children:/*#__PURE__*/_jsx(Link,{to:\"/details\",state:{d:d},children:/*#__PURE__*/_jsx(NFTCard,{data:d})})})});})})})});};export default NftLists;","map":{"version":3,"names":["React","useEffect","useState","Card","Box","styled","Link","NFTCard","Web3","marketplaceContract","jsx","_jsx","Fragment","_Fragment","CardBody","Body","NftLists","props","_useState","_useState2","_slicedToArray","nfts","setNFTs","apiData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","fetchNFTs","web3","accounts","address","wrap","_callee2$","_context2","prev","next","_ref2","_callee","tokenURIs","filteredTokenURIs","_callee$","_context","getListedTokens","sent","console","log","length","filter","tokenURI","seller","t0","error","stop","apply","arguments","window","ethereum","enable","eth","getAccounts","children","map","d","to","state","data"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/NftLists.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react'\nimport Card from '@mui/material/Card'\nimport { Box, styled } from '@mui/material'\nimport { Link } from \"react-router-dom\";\nimport NFTCard from './NftCard'\nimport Web3 from 'web3';\nimport { marketplaceContract} from 'web3config/web3config'\nconst CardBody = styled(Box)(\n  () => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `,\n)\n\nconst Body = styled(Card)(\n  () => `\n  width:20%;\n  margin-bottom:2%;\n  cursor:pointer;\n  border: 1px solid;\n  box-shadow: 5px 4px #342929;\n  border-radius: 6%;\n\n\n}\n  `,\n)\n\nfunction NftLists(props) {\n  const [nfts, setNFTs] = useState([]);\n  useEffect(()=>{\n    const  apiData = async() => {\n      const fetchNFTs = async () => {\n        try {\n          const tokenURIs = await marketplaceContract.getListedTokens();\n          console.log(tokenURIs.length,\"length\");\n          console.log(tokenURIs,\"pure tokenuris\");\n          const filteredTokenURIs = tokenURIs.filter(tokenURI => tokenURI.seller !== '0x0000000000000000000000000000000000000000');\n          console.log(filteredTokenURIs,\"filtertokenuris\");\n          setNFTs(filteredTokenURIs);\n          } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }         \n    };\n    apiData()\n  },[])\n  return (\n    <div>\n      <div>\n       <CardBody> \n       {nfts?.map((d) => {\n           return (\n             <>\n               <Body>\n               <Link to=\"/details\" state={{ d: d }}>\n                <NFTCard data={d}/>\n               </Link>\n               </Body>\n             </>\n           )\n         })}\n       </CardBody>\n      </div> \n    </div>\n  );\n};\n\nexport default NftLists\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}