{"ast":null,"code":"// // import React from 'react'\n// // import abi from 'abi/ERC721Contract.json'\n// // import { ethers } from 'ethers';\n// // async function Profile() {\n// //     const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\n// // const contractabi = abi.abi;\n// // const { ethereum } = window;\n// // const provider = new ethers.providers.Web3Provider(ethereum);\n// // const signer = provider.getSigner();\n// // const contractss = new ethers.Contract(address, contractabi,signer);\n// // const trx=await contractss.safeMint();\n// // \t\t\t\t\tawait trx.wait();\n// // \t\t\t\t\tconsole.log(\"minted successfully\");\n// // \t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n// //   return (\n// //     <div>\n\n// //     </div>\n// //   )\n// // }\n\n// // export default Profile\n\n// import { useState, useEffect } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Col, Card, Button } from 'react-bootstrap'\n\n// const Profile = ({ marketplace, nft }) => {\n//   const [loading, setLoading] = useState(true)\n//   const [items, setItems] = useState([])\n//   const loadMarketplaceItems = async () => {\n//     // Load all unsold items\n//     const itemCount = 2;\n//     let items = []\n//     for (let i = 0; i <= itemCount; i++) {\n//       // const item = await marketplace.items(i)\n//       // if (!item.sold) {\n//         // get uri url from nft contract\n//         const uri = await nft.tokenURI(0)\n//         // use uri to fetch the nft metadata stored on ipfs \n//         const response = await fetch(uri)\n//         const metadata = await response.json()\n//         // get total price of item (item price + fee)\n//       //  const totalPrice = await marketplace.getTotalPrice(item.itemId)\n//         // Add item to items array\n//         items.push({\n//         //  totalPrice,\n//           // itemId: item.itemId,\n//           // seller: item.seller,\n//           name: metadata.name,\n//           description: metadata.description,\n//           image: metadata.image\n//         })\n//       // }\n//     }\n//     setLoading(false)\n//     setItems(items)\n//   }\n\n//   // const buyMarketItem = async (item) => {\n//   //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n//   //   loadMarketplaceItems()\n//   // }\n\n//   useEffect(() => {\n//     loadMarketplaceItems()\n//   }, [])\n//   if (loading) return (\n//     <main style={{ padding: \"1rem 0\" }}>\n//       <h2>Loading...</h2>\n//     </main>\n//   )\n//   return (\n//     <div className=\"flex justify-center\">\n//       {items.length > 0 ?\n//         <div className=\"px-5 container\">\n//           <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n//             {items.map((item, idx) => (\n//               <Col key={idx} className=\"overflow-hidden\">\n//                 <Card>\n//                   <Card.Img variant=\"top\" src={item.image} />\n//                   <Card.Body color=\"secondary\">\n//                     <Card.Title>{item.name}</Card.Title>\n//                     <Card.Text>\n//                       {item.description}\n//                     </Card.Text>\n//                   </Card.Body>\n//                   <Card.Footer>\n//                     <div className='d-grid'>\n//                       {/* <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n//                         Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n//                       </Button> */}\n//                     </div>\n//                   </Card.Footer>\n//                 </Card>\n//               </Col>\n//             ))}\n//           </Row>\n//         </div>\n//         : (\n//           <main style={{ padding: \"1rem 0\" }}>\n//             <h2>No listed assets</h2>\n//           </main>\n//         )}\n//     </div>\n//   );\n// }\n// export default Profile","map":{"version":3,"names":[],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\n// // import abi from 'abi/ERC721Contract.json'\n// // import { ethers } from 'ethers';\n// // async function Profile() {\n// //     const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\n// // const contractabi = abi.abi;\n// // const { ethereum } = window;\n// // const provider = new ethers.providers.Web3Provider(ethereum);\n// // const signer = provider.getSigner();\n// // const contractss = new ethers.Contract(address, contractabi,signer);\n// // const trx=await contractss.safeMint();\n// // \t\t\t\t\tawait trx.wait();\n// // \t\t\t\t\tconsole.log(\"minted successfully\");\n// // \t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n// //   return (\n// //     <div>\n\n// //     </div>\n// //   )\n// // }\n\n// // export default Profile\n\n\n// import { useState, useEffect } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Col, Card, Button } from 'react-bootstrap'\n\n// const Profile = ({ marketplace, nft }) => {\n//   const [loading, setLoading] = useState(true)\n//   const [items, setItems] = useState([])\n//   const loadMarketplaceItems = async () => {\n//     // Load all unsold items\n//     const itemCount = 2;\n//     let items = []\n//     for (let i = 0; i <= itemCount; i++) {\n//       // const item = await marketplace.items(i)\n//       // if (!item.sold) {\n//         // get uri url from nft contract\n//         const uri = await nft.tokenURI(0)\n//         // use uri to fetch the nft metadata stored on ipfs \n//         const response = await fetch(uri)\n//         const metadata = await response.json()\n//         // get total price of item (item price + fee)\n//       //  const totalPrice = await marketplace.getTotalPrice(item.itemId)\n//         // Add item to items array\n//         items.push({\n//         //  totalPrice,\n//           // itemId: item.itemId,\n//           // seller: item.seller,\n//           name: metadata.name,\n//           description: metadata.description,\n//           image: metadata.image\n//         })\n//       // }\n//     }\n//     setLoading(false)\n//     setItems(items)\n//   }\n\n//   // const buyMarketItem = async (item) => {\n//   //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n//   //   loadMarketplaceItems()\n//   // }\n\n//   useEffect(() => {\n//     loadMarketplaceItems()\n//   }, [])\n//   if (loading) return (\n//     <main style={{ padding: \"1rem 0\" }}>\n//       <h2>Loading...</h2>\n//     </main>\n//   )\n//   return (\n//     <div className=\"flex justify-center\">\n//       {items.length > 0 ?\n//         <div className=\"px-5 container\">\n//           <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n//             {items.map((item, idx) => (\n//               <Col key={idx} className=\"overflow-hidden\">\n//                 <Card>\n//                   <Card.Img variant=\"top\" src={item.image} />\n//                   <Card.Body color=\"secondary\">\n//                     <Card.Title>{item.name}</Card.Title>\n//                     <Card.Text>\n//                       {item.description}\n//                     </Card.Text>\n//                   </Card.Body>\n//                   <Card.Footer>\n//                     <div className='d-grid'>\n//                       {/* <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n//                         Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n//                       </Button> */}\n//                     </div>\n//                   </Card.Footer>\n//                 </Card>\n//               </Col>\n//             ))}\n//           </Row>\n//         </div>\n//         : (\n//           <main style={{ padding: \"1rem 0\" }}>\n//             <h2>No listed assets</h2>\n//           </main>\n//         )}\n//     </div>\n//   );\n// }\n// export default Profile"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}