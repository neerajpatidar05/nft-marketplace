{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      const fetchNFTs = async Metamaskaddress => {\n        try {\n          const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n          const contractabi = abi.abi;\n          const {\n            ethereum\n          } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi, signer);\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress);\n          setNFTs(tokenURIs);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          component: \"img\",\n          src: tokenURI.image,\n          alt: `NFT ${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"div\",\n            children: \"NFT Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: \"NFT Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  //   const connectToMetamask = async () => {\n  //     // Check if Metamask is installed and request account access\n  //     if (typeof window.ethereum !== 'undefined') {\n  //       try {\n  //         await window.ethereum.enable();\n  //         const web3 = new Web3(window.ethereum);\n  //         const accounts = await web3.eth.getAccounts();\n  //         const address = accounts[0];\n  //         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n  //         fetchNFTs(address);\n  //       } catch (error) {\n  //         console.error('Error connecting to Metamask:', error);\n  //       }\n  //     } else {\n  //       console.error('Metamask is not installed');\n  //     }\n  //   };\n\n  //   const fetchNFTs = async (Metamaskaddress) => {\n  //     try {\n  //            // Replace with your contract address and ABI\n  //       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n  //       const contractabi = abi.abi;\n  //       const { ethereum } = window;\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const contractss = new ethers.Contract(address, contractabi,signer);\n  //       console.log(contractss,\"contractssssssssssssssss\");\n  //       // Call the getOwnedNFTs function in the smart contract\n  //       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n  //       console.log(tokenURIs,'tokenuriiiiiii');\n  //       // Set the retrieved NFTs in the component state\n  //       setNFTs(tokenURIs);\n  //     } catch (error) {\n  //       console.error('Error fetching NFTs:', error);\n  //     }\n  //   };\n\n  //   return (\n  //     <div>\n  //       <button onClick={connectToMetamask}>Connect to Metamask</button>\n  //        <div>\n  //         {nfts.map((tokenURI, index) => (\n  //           <Card key={index}>\n  //             {/* Display NFT image */}\n  //             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n  // {/* {console.log(tokenURI.image)} */}\n  //             <CardContent>\n  //               {/* Display NFT details */}\n  //               <Typography variant=\"h5\" component=\"div\">\n  //                 NFT Title\n  //               </Typography>\n  //               <Typography variant=\"body2\" color=\"text.secondary\">\n  //               NFT Description\n  //               </Typography>\n  //             </CardContent>\n  //           </Card>\n  //         ))}\n\n  //       </div> \n  //     </div>\n  //   );\n};\n_s(Profile, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","useEffect","Web3","Card","CardMedia","CardContent","Typography","jsxDEV","_jsxDEV","Profile","_s","nfts","setNFTs","apiData","fetchNFTs","Metamaskaddress","address","contractabi","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contractss","Contract","tokenURIs","getOwnedNFTs","error","console","enable","web3","accounts","eth","getAccounts","children","map","tokenURI","index","component","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState ,useEffect} from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n\n  useEffect(()=>{\n    const  apiData = async() => {\n      const fetchNFTs = async (Metamaskaddress) => {\n        try {\n          const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n          const contractabi = abi.abi;\n          const { ethereum } = window;\n          const provider = new ethers.providers.Web3Provider(ethereum);\n          const signer = provider.getSigner();\n          const contractss = new ethers.Contract(address, contractabi,signer);\n          const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n          setNFTs(tokenURIs);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n\n\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n\n           \n    };\n    apiData()\n  },[])\n  return (\n    <div>\n      {/* <button onClick={connectToMetamask}>Connect to Metamask</button> */}\n       <div>\n        {nfts.map((tokenURI, index) => (\n          <Card key={index}>\n            {/* Display NFT image */}\n            <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n{/* {console.log(tokenURI.image)} */}\n            <CardContent>\n              {/* Display NFT details */}\n              <Typography variant=\"h5\" component=\"div\">\n                NFT Title\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n              NFT Description\n              </Typography>\n            </CardContent>\n          </Card>\n        ))}\n        \n      </div> \n    </div>\n  );\n\n//   const connectToMetamask = async () => {\n//     // Check if Metamask is installed and request account access\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         const accounts = await web3.eth.getAccounts();\n//         const address = accounts[0];\n//         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n//         fetchNFTs(address);\n//       } catch (error) {\n//         console.error('Error connecting to Metamask:', error);\n//       }\n//     } else {\n//       console.error('Metamask is not installed');\n//     }\n//   };\n\n//   const fetchNFTs = async (Metamaskaddress) => {\n//     try {\n//            // Replace with your contract address and ABI\n//       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n//       const contractabi = abi.abi;\n//       const { ethereum } = window;\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const contractss = new ethers.Contract(address, contractabi,signer);\n//       console.log(contractss,\"contractssssssssssssssss\");\n//       // Call the getOwnedNFTs function in the smart contract\n//       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n//       console.log(tokenURIs,'tokenuriiiiiii');\n//       // Set the retrieved NFTs in the component state\n//       setNFTs(tokenURIs);\n//     } catch (error) {\n//       console.error('Error fetching NFTs:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={connectToMetamask}>Connect to Metamask</button>\n//        <div>\n//         {nfts.map((tokenURI, index) => (\n//           <Card key={index}>\n//             {/* Display NFT image */}\n//             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n// {/* {console.log(tokenURI.image)} */}\n//             <CardContent>\n//               {/* Display NFT details */}\n//               <Typography variant=\"h5\" component=\"div\">\n//                 NFT Title\n//               </Typography>\n//               <Typography variant=\"body2\" color=\"text.secondary\">\n//               NFT Description\n//               </Typography>\n//             </CardContent>\n//           </Card>\n//         ))}\n        \n//       </div> \n//     </div>\n//   );\n};\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}