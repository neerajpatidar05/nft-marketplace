{"ast":null,"code":"var _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          console.log(address, \"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n\n  //   const connectToMetamask = async () => {\n  //     // Check if Metamask is installed and request account access\n  //     if (typeof window.ethereum !== 'undefined') {\n  //       try {\n  //         await window.ethereum.enable();\n  //         const web3 = new Web3(window.ethereum);\n  //         const accounts = await web3.eth.getAccounts();\n  //         const address = accounts[0];\n  //         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n  //         fetchNFTs(address);\n  //       } catch (error) {\n  //         console.error('Error connecting to Metamask:', error);\n  //       }\n  //     } else {\n  //       console.error('Metamask is not installed');\n  //     }\n  //   };\n\n  //   const fetchNFTs = async (Metamaskaddress) => {\n  //     try {\n  //            // Replace with your contract address and ABI\n  //       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n  //       const contractabi = abi.abi;\n  //       const { ethereum } = window;\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const contractss = new ethers.Contract(address, contractabi,signer);\n  //       console.log(contractss,\"contractssssssssssssssss\");\n  //       // Call the getOwnedNFTs function in the smart contract\n  //       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n  //       console.log(tokenURIs,'tokenuriiiiiii');\n  //       // Set the retrieved NFTs in the component state\n  //       setNFTs(tokenURIs);\n  //     } catch (error) {\n  //       console.error('Error fetching NFTs:', error);\n  //     }\n  //   };\n\n  //   return (\n  //     <div>\n  //       <button onClick={connectToMetamask}>Connect to Metamask</button>\n  //        <div>\n  //         {nfts.map((tokenURI, index) => (\n  //           <Card key={index}>\n  //             {/* Display NFT image */}\n  //             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n  // {/* {console.log(tokenURI.image)} */}\n  //             <CardContent>\n  //               {/* Display NFT details */}\n  //               <Typography variant=\"h5\" component=\"div\">\n  //                 NFT Title\n  //               </Typography>\n  //               <Typography variant=\"body2\" color=\"text.secondary\">\n  //               NFT Description\n  //               </Typography>\n  //             </CardContent>\n  //           </Card>\n  //         ))}\n\n  //       </div> \n  //     </div>\n  //   );\n};\n_s(Profile, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","useEffect","Web3","Card","CardMedia","CardContent","Typography","Profile","_s","nfts","setNFTs","apiData","window","ethereum","enable","web3","accounts","eth","getAccounts","address","console","log","fetchNFTs","error","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState ,useEffect} from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n\n  useEffect(()=>{\n    const  apiData = async() => {\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n\n    };\n    apiData()\n  },[])\n\n\n//   const connectToMetamask = async () => {\n//     // Check if Metamask is installed and request account access\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         const accounts = await web3.eth.getAccounts();\n//         const address = accounts[0];\n//         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n//         fetchNFTs(address);\n//       } catch (error) {\n//         console.error('Error connecting to Metamask:', error);\n//       }\n//     } else {\n//       console.error('Metamask is not installed');\n//     }\n//   };\n\n//   const fetchNFTs = async (Metamaskaddress) => {\n//     try {\n//            // Replace with your contract address and ABI\n//       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n//       const contractabi = abi.abi;\n//       const { ethereum } = window;\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const contractss = new ethers.Contract(address, contractabi,signer);\n//       console.log(contractss,\"contractssssssssssssssss\");\n//       // Call the getOwnedNFTs function in the smart contract\n//       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n//       console.log(tokenURIs,'tokenuriiiiiii');\n//       // Set the retrieved NFTs in the component state\n//       setNFTs(tokenURIs);\n//     } catch (error) {\n//       console.error('Error fetching NFTs:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={connectToMetamask}>Connect to Metamask</button>\n//        <div>\n//         {nfts.map((tokenURI, index) => (\n//           <Card key={index}>\n//             {/* Display NFT image */}\n//             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n// {/* {console.log(tokenURI.image)} */}\n//             <CardContent>\n//               {/* Display NFT details */}\n//               <Typography variant=\"h5\" component=\"div\">\n//                 NFT Title\n//               </Typography>\n//               <Typography variant=\"body2\" color=\"text.secondary\">\n//               NFT Description\n//               </Typography>\n//             </CardContent>\n//           </Card>\n//         ))}\n        \n//       </div> \n//     </div>\n//   );\n};\n\nexport default Profile;\n"],"mappings":";AAAA;AACA,OAAOA,GAAG,MAAM,yBAAyB;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,eAAe;AAExE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAGpCC,SAAS,CAAC,MAAI;IACZ,MAAOU,OAAO,GAAG,MAAAA,CAAA,KAAW;MAC1B,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;QACpC,IAAI;UACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;UAC9B,MAAMC,IAAI,GAAG,IAAIb,IAAI,CAACU,MAAM,CAACC,QAAQ,CAAC;UACtC,MAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC;UAC7C,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;UAC3BI,OAAO,CAACC,GAAG,CAACF,OAAO,EAAC,mEAAmE,CAAC;UACxFG,SAAS,CAACH,OAAO,CAAC;QACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACvD;MACF,CAAC,MAAM;QACLH,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC;MAC5C;IAER,CAAC;IACDZ,OAAO,CAAC,CAAC;EACX,CAAC,EAAC,EAAE,CAAC;;EAGP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AACA,CAAC;AAACH,EAAA,CAxFID,OAAO;AAAAiB,EAAA,GAAPjB,OAAO;AA0Fb,eAAeA,OAAO;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}