{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { isMetaMaskInstalled } from \"utils\";\n// import NFT from \"abi/NftMarketPlace.json\"\nimport Web3 from \"web3\";\nimport { RPC_URLS } from \"constant\";\nconst getContract = (abi, contractAddress) => {\n  if (isMetaMaskInstalled()) {\n    return new Contract(contractAddress, abi);\n  }\n  return;\n};\nexport const getWeb3Contract = (chainId, abi, contractAddress) => {\n  let web3;\n  if (isMetaMaskInstalled()) {\n    web3 = new Web3(window.ethereum);\n  } else {\n    web3 = new Web3(new Web3.providers.HttpProvider(RPC_URLS === null || RPC_URLS === void 0 ? void 0 : RPC_URLS[chainId]));\n  }\n  return new web3.eth.Contract(abi, contractAddress);\n};\nexport const web3NftContract = _ref => {\n  let {\n    address,\n    chainId\n  } = _ref;\n  if (!address) {\n    return null;\n  }\n  return getWeb3Contract(chainId, NFT, address);\n};","map":{"version":3,"names":["Contract","isMetaMaskInstalled","Web3","RPC_URLS","getContract","abi","contractAddress","getWeb3Contract","chainId","web3","window","ethereum","providers","HttpProvider","eth","web3NftContract","_ref","address","NFT"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/contract/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { isMetaMaskInstalled } from \"utils\";\n// import NFT from \"abi/NftMarketPlace.json\"\nimport Web3 from \"web3\";\nimport { RPC_URLS } from \"constant\";\n\n\n\n\n\nconst getContract =(abi,contractAddress)=>{\n    if (isMetaMaskInstalled()) {\n\t\treturn new Contract(contractAddress, abi);\n\t}\n\treturn;\n}\n\nexport const getWeb3Contract = (chainId, abi, contractAddress) => {\n\tlet web3;\n\tif (isMetaMaskInstalled()) {\n\t\tweb3 = new Web3(window.ethereum);\n\t} else {\n\t\tweb3 = new Web3(new Web3.providers.HttpProvider(RPC_URLS?.[chainId]));\n\t}\n\n\treturn new web3.eth.Contract(abi, contractAddress);\n};\n\n\n\nexport const web3NftContract = ({ address, chainId }) => {\n\tif (!address) {\n\t\treturn null;\n\t}\n\n\treturn getWeb3Contract(chainId, NFT, address);\n};"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,mBAAmB,QAAQ,OAAO;AAC3C;AACA,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,QAAQ,QAAQ,UAAU;AAMnC,MAAMC,WAAW,GAAEA,CAACC,GAAG,EAACC,eAAe,KAAG;EACtC,IAAIL,mBAAmB,CAAC,CAAC,EAAE;IAC7B,OAAO,IAAID,QAAQ,CAACM,eAAe,EAAED,GAAG,CAAC;EAC1C;EACA;AACD,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACC,OAAO,EAAEH,GAAG,EAAEC,eAAe,KAAK;EACjE,IAAIG,IAAI;EACR,IAAIR,mBAAmB,CAAC,CAAC,EAAE;IAC1BQ,IAAI,GAAG,IAAIP,IAAI,CAACQ,MAAM,CAACC,QAAQ,CAAC;EACjC,CAAC,MAAM;IACNF,IAAI,GAAG,IAAIP,IAAI,CAAC,IAAIA,IAAI,CAACU,SAAS,CAACC,YAAY,CAACV,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGK,OAAO,CAAC,CAAC,CAAC;EACtE;EAEA,OAAO,IAAIC,IAAI,CAACK,GAAG,CAACd,QAAQ,CAACK,GAAG,EAAEC,eAAe,CAAC;AACnD,CAAC;AAID,OAAO,MAAMS,eAAe,GAAGC,IAAA,IAA0B;EAAA,IAAzB;IAAEC,OAAO;IAAET;EAAQ,CAAC,GAAAQ,IAAA;EACnD,IAAI,CAACC,OAAO,EAAE;IACb,OAAO,IAAI;EACZ;EAEA,OAAOV,eAAe,CAACC,OAAO,EAAEU,GAAG,EAAED,OAAO,CAAC;AAC9C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}