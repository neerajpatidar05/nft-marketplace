{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\n\n// // async function Profile() {\n// //     const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\n// // const contractabi = abi.abi;\n// // const { ethereum } = window;\n// // const provider = new ethers.providers.Web3Provider(ethereum);\n// // const signer = provider.getSigner();\n// // const contractss = new ethers.Contract(address, contractabi,signer);\n// // const trx=await contractss.safeMint();\n// // \t\t\t\t\tawait trx.wait();\n// // \t\t\t\t\tconsole.log(\"minted successfully\");\n// // \t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n// //   return (\n// //     <div>\n\n// //     </div>\n// //   )\n// // }\n\n// // export default Profile\n\n// import { useState, useEffect } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Col, Card, Button } from 'react-bootstrap'\n\n// const Profile = ({ marketplace, nft }) => {\n//   const [loading, setLoading] = useState(true)\n//   const [items, setItems] = useState([])\n//   const loadMarketplaceItems = async () => {\n//     // Load all unsold items\n//     const itemCount = 2;\n//     let items = []\n//     for (let i = 0; i <= itemCount; i++) {\n//       // const item = await marketplace.items(i)\n//       // if (!item.sold) {\n//         // get uri url from nft contract\n//         const uri = await nft.tokenURI(0)\n//         // use uri to fetch the nft metadata stored on ipfs \n//         const response = await fetch(uri)\n//         const metadata = await response.json()\n//         // get total price of item (item price + fee)\n//       //  const totalPrice = await marketplace.getTotalPrice(item.itemId)\n//         // Add item to items array\n//         items.push({\n//         //  totalPrice,\n//           // itemId: item.itemId,\n//           // seller: item.seller,\n//           name: metadata.name,\n//           description: metadata.description,\n//           image: metadata.image\n//         })\n//       // }\n//     }\n//     setLoading(false)\n//     setItems(items)\n//   }\n\n//   // const buyMarketItem = async (item) => {\n//   //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n//   //   loadMarketplaceItems()\n//   // }\n\n//   useEffect(() => {\n//     loadMarketplaceItems()\n//   }, [])\n//   if (loading) return (\n//     <main style={{ padding: \"1rem 0\" }}>\n//       <h2>Loading...</h2>\n//     </main>\n//   )\n//   return (\n//     <div className=\"flex justify-center\">\n//       {items.length > 0 ?\n//         <div className=\"px-5 container\">\n//           <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n//             {items.map((item, idx) => (\n//               <Col key={idx} className=\"overflow-hidden\">\n//                 <Card>\n//                   <Card.Img variant=\"top\" src={item.image} />\n//                   <Card.Body color=\"secondary\">\n//                     <Card.Title>{item.name}</Card.Title>\n//                     <Card.Text>\n//                       {item.description}\n//                     </Card.Text>\n//                   </Card.Body>\n//                   <Card.Footer>\n//                     <div className='d-grid'>\n//                       {/* <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n//                         Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n//                       </Button> */}\n//                     </div>\n//                   </Card.Footer>\n//                 </Card>\n//               </Col>\n//             ))}\n//           </Row>\n//         </div>\n//         : (\n//           <main style={{ padding: \"1rem 0\" }}>\n//             <h2>No listed assets</h2>\n//           </main>\n//         )}\n//     </div>\n//   );\n// }\n// export default Profile\n\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  const connectToMetamask = async () => {\n    // Check if Metamask is installed and request account access\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        const web3 = new Web3(window.ethereum);\n        const accounts = await web3.eth.getAccounts();\n        const address = accounts[0];\n        fetchNFTs(address);\n      } catch (error) {\n        console.error('Error connecting to Metamask:', error);\n      }\n    } else {\n      console.error('Metamask is not installed');\n    }\n  };\n  const fetchNFTs = async Metamaskaddress => {\n    try {\n      // Replace with your contract address and ABI\n      const address = '0x2f0DF039B5A139804F2f8b04D724A3fEE21253C2';\n      const contractabi = abi.abi;\n      const {\n        ethereum\n      } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contractss = new ethers.Contract(address, contractabi, signer);\n      console.log(contractss, \"contractssssssssssssssss\");\n      // Call the getOwnedNFTs function in the smart contract\n      const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress);\n      console.log(tokenURIs, 'tokenuriiiiiii');\n      // Set the retrieved NFTs in the component state\n      setNFTs(tokenURIs);\n    } catch (error) {\n      console.error('Error fetching NFTs:', error);\n    }\n  };\n  //   {nfts.map((tokenURI, index) => (\n  //     <Card key={index}>\n  //       {/* Display NFT image */}\n  //       <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n  // {/* {console.log(tokenURI.image)} */}\n  //       <CardContent>\n  //         {/* Display NFT details */}\n  //         <Typography variant=\"h5\" component=\"div\">\n  //           NFT Title\n  //         </Typography>\n  //         <Typography variant=\"body2\" color=\"text.secondary\">\n  //         {tokenURI.description}\n  //         </Typography>\n  //       </CardContent>\n  //     </Card>\n  //   ))}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToMetamask,\n      children: \"Connect to Metamask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n        children: fetch(tokenURI).then(response => response.json()).then(metadata => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            src: metadata.image,\n            alt: `NFT ${index}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: metadata.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: metadata.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 3\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"siP5CtpxIdpYAZcq74Cck5237gY=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","Web3","Card","CardMedia","CardContent","Typography","jsxDEV","_jsxDEV","Fragment","_Fragment","Profile","_s","nfts","setNFTs","connectToMetamask","window","ethereum","enable","web3","accounts","eth","getAccounts","address","fetchNFTs","error","console","Metamaskaddress","contractabi","provider","providers","Web3Provider","signer","getSigner","contractss","Contract","log","tokenURIs","getOwnedNFTs","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","tokenURI","index","fetch","then","response","json","metadata","component","src","image","alt","variant","name","color","description","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\n import abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\n\n// // async function Profile() {\n// //     const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\n// // const contractabi = abi.abi;\n// // const { ethereum } = window;\n// // const provider = new ethers.providers.Web3Provider(ethereum);\n// // const signer = provider.getSigner();\n// // const contractss = new ethers.Contract(address, contractabi,signer);\n// // const trx=await contractss.safeMint();\n// // \t\t\t\t\tawait trx.wait();\n// // \t\t\t\t\tconsole.log(\"minted successfully\");\n// // \t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n// //   return (\n// //     <div>\n\n// //     </div>\n// //   )\n// // }\n\n// // export default Profile\n\n\n// import { useState, useEffect } from 'react'\n// import { ethers } from \"ethers\"\n// import { Row, Col, Card, Button } from 'react-bootstrap'\n\n// const Profile = ({ marketplace, nft }) => {\n//   const [loading, setLoading] = useState(true)\n//   const [items, setItems] = useState([])\n//   const loadMarketplaceItems = async () => {\n//     // Load all unsold items\n//     const itemCount = 2;\n//     let items = []\n//     for (let i = 0; i <= itemCount; i++) {\n//       // const item = await marketplace.items(i)\n//       // if (!item.sold) {\n//         // get uri url from nft contract\n//         const uri = await nft.tokenURI(0)\n//         // use uri to fetch the nft metadata stored on ipfs \n//         const response = await fetch(uri)\n//         const metadata = await response.json()\n//         // get total price of item (item price + fee)\n//       //  const totalPrice = await marketplace.getTotalPrice(item.itemId)\n//         // Add item to items array\n//         items.push({\n//         //  totalPrice,\n//           // itemId: item.itemId,\n//           // seller: item.seller,\n//           name: metadata.name,\n//           description: metadata.description,\n//           image: metadata.image\n//         })\n//       // }\n//     }\n//     setLoading(false)\n//     setItems(items)\n//   }\n\n//   // const buyMarketItem = async (item) => {\n//   //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n//   //   loadMarketplaceItems()\n//   // }\n\n//   useEffect(() => {\n//     loadMarketplaceItems()\n//   }, [])\n//   if (loading) return (\n//     <main style={{ padding: \"1rem 0\" }}>\n//       <h2>Loading...</h2>\n//     </main>\n//   )\n//   return (\n//     <div className=\"flex justify-center\">\n//       {items.length > 0 ?\n//         <div className=\"px-5 container\">\n//           <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n//             {items.map((item, idx) => (\n//               <Col key={idx} className=\"overflow-hidden\">\n//                 <Card>\n//                   <Card.Img variant=\"top\" src={item.image} />\n//                   <Card.Body color=\"secondary\">\n//                     <Card.Title>{item.name}</Card.Title>\n//                     <Card.Text>\n//                       {item.description}\n//                     </Card.Text>\n//                   </Card.Body>\n//                   <Card.Footer>\n//                     <div className='d-grid'>\n//                       {/* <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n//                         Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n//                       </Button> */}\n//                     </div>\n//                   </Card.Footer>\n//                 </Card>\n//               </Col>\n//             ))}\n//           </Row>\n//         </div>\n//         : (\n//           <main style={{ padding: \"1rem 0\" }}>\n//             <h2>No listed assets</h2>\n//           </main>\n//         )}\n//     </div>\n//   );\n// }\n// export default Profile\n\n\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n  const connectToMetamask = async () => {\n    // Check if Metamask is installed and request account access\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        const web3 = new Web3(window.ethereum);\n        const accounts = await web3.eth.getAccounts();\n        const address = accounts[0];\n        fetchNFTs(address);\n      } catch (error) {\n        console.error('Error connecting to Metamask:', error);\n      }\n    } else {\n      console.error('Metamask is not installed');\n    }\n  };\n\n  const fetchNFTs = async (Metamaskaddress) => {\n    try {\n           // Replace with your contract address and ABI\n      const address = '0x2f0DF039B5A139804F2f8b04D724A3fEE21253C2';\n      const contractabi = abi.abi;\n      const { ethereum } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contractss = new ethers.Contract(address, contractabi,signer);\n      console.log(contractss,\"contractssssssssssssssss\");\n      // Call the getOwnedNFTs function in the smart contract\n      const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n      console.log(tokenURIs,'tokenuriiiiiii');\n      // Set the retrieved NFTs in the component state\n      setNFTs(tokenURIs);\n    } catch (error) {\n      console.error('Error fetching NFTs:', error);\n    }\n  };\n//   {nfts.map((tokenURI, index) => (\n//     <Card key={index}>\n//       {/* Display NFT image */}\n//       <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n// {/* {console.log(tokenURI.image)} */}\n//       <CardContent>\n//         {/* Display NFT details */}\n//         <Typography variant=\"h5\" component=\"div\">\n//           NFT Title\n//         </Typography>\n//         <Typography variant=\"body2\" color=\"text.secondary\">\n//         {tokenURI.description}\n//         </Typography>\n//       </CardContent>\n//     </Card>\n//   ))}\n  return (\n    <div>\n      <button onClick={connectToMetamask}>Connect to Metamask</button>\n       <div>\n       \n        { nfts.map((tokenURI, index) => (\n  <Card key={index}>\n    {/* Fetch the metadata from the IPFS URL */}\n    {fetch(tokenURI)\n      .then((response) => response.json())\n      .then((metadata) => (\n        <>\n          {/* Display NFT image */}\n          <CardMedia component=\"img\" src={metadata.image} alt={`NFT ${index}`} />\n\n          <CardContent>\n            {/* Display NFT details */}\n            <Typography variant=\"h5\" component=\"div\">\n              {metadata.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {metadata.description}\n            </Typography>\n          </CardContent>\n        </>\n      ))\n    }\n  </Card>\n))}\n\n      </div> \n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":";;AAAA;AACC,OAAOA,GAAG,MAAM,yBAAyB;AAC1C,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC;IACA,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC9B,MAAMC,IAAI,GAAG,IAAIjB,IAAI,CAACc,MAAM,CAACC,QAAQ,CAAC;QACtC,MAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC;QAC7C,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAC3BI,SAAS,CAACD,OAAO,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAC;IAC5C;EACF,CAAC;EAED,MAAMD,SAAS,GAAG,MAAOG,eAAe,IAAK;IAC3C,IAAI;MACG;MACL,MAAMJ,OAAO,GAAG,4CAA4C;MAC5D,MAAMK,WAAW,GAAG9B,GAAG,CAACA,GAAG;MAC3B,MAAM;QAAEmB;MAAS,CAAC,GAAGD,MAAM;MAC3B,MAAMa,QAAQ,GAAG,IAAI9B,MAAM,CAAC+B,SAAS,CAACC,YAAY,CAACd,QAAQ,CAAC;MAC5D,MAAMe,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;MACnC,MAAMC,UAAU,GAAG,IAAInC,MAAM,CAACoC,QAAQ,CAACZ,OAAO,EAAEK,WAAW,EAACI,MAAM,CAAC;MACnEN,OAAO,CAACU,GAAG,CAACF,UAAU,EAAC,0BAA0B,CAAC;MAClD;MACA,MAAMG,SAAS,GAAG,MAAMH,UAAU,CAACI,YAAY,CAACX,eAAgB,CAAC;MACjED,OAAO,CAACU,GAAG,CAACC,SAAS,EAAC,gBAAgB,CAAC;MACvC;MACAvB,OAAO,CAACuB,SAAS,CAAC;IACpB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,oBACEjB,OAAA;IAAA+B,QAAA,gBACE/B,OAAA;MAAQgC,OAAO,EAAEzB,iBAAkB;MAAAwB,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/DpC,OAAA;MAAA+B,QAAA,EAEG1B,IAAI,CAACgC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACjCvC,OAAA,CAACL,IAAI;QAAAoC,QAAA,EAEFS,KAAK,CAACF,QAAQ,CAAC,CACbG,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,QAAQ,iBACb5C,OAAA,CAAAE,SAAA;UAAA6B,QAAA,gBAEE/B,OAAA,CAACJ,SAAS;YAACiD,SAAS,EAAC,KAAK;YAACC,GAAG,EAAEF,QAAQ,CAACG,KAAM;YAACC,GAAG,EAAG,OAAMT,KAAM;UAAE;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAEvEpC,OAAA,CAACH,WAAW;YAAAkC,QAAA,gBAEV/B,OAAA,CAACF,UAAU;cAACmD,OAAO,EAAC,IAAI;cAACJ,SAAS,EAAC,KAAK;cAAAd,QAAA,EACrCa,QAAQ,CAACM;YAAI;cAAAjB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACbpC,OAAA,CAACF,UAAU;cAACmD,OAAO,EAAC,OAAO;cAACE,KAAK,EAAC,gBAAgB;cAAApB,QAAA,EAC/Ca,QAAQ,CAACQ;YAAW;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACX,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA,eACd,CACH;MAAC,GAnBKG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqBV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAES,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CAxFID,OAAO;AAAAkD,EAAA,GAAPlD,OAAO;AA0Fb,eAAeA,OAAO;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}