{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\n// import abi from 'abi/ERC721Contract.json'\n// import { ethers } from 'ethers';\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\n// import marketplaceabi from 'abi/marketplace.json'\nimport { nftcontract, marketplaceContract } from 'web3config/web3config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      // const fetchNFTs = async (Metamaskaddress) => {\n      //    try {\n      //     const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress );\n      //     const getSuccessfullyBoughtTokens= await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n      //     const tokenUriOfBoughtToken=[];\n      //     if(getSuccessfullyBoughtTokens.length!==0){\n      //       for(let i=0;i<getSuccessfullyBoughtTokens.length;i++){\n      //        tokenUriOfBoughtToken[i]= await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i])\n      //       }\n      //     }\n      //     const combinedTokenURIsSet = new Set([...tokenURIs, ...tokenUriOfBoughtToken]);\n      //     if (combinedTokenURIsSet.size === 0) {\n      //       console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n      //     } else {\n      //       const filteredTokenURIs = Array.from(combinedTokenURIsSet);\n      //       console.log(filteredTokenURIs, \"tokenuri from profile\");\n      //       setNFTs(filteredTokenURIs);\n      //     }\n\n      //   } catch (error) {\n      //     console.error('Error fetching NFTs:', error);\n      //   }\n      // };\n      const fetchNFTs = async Metamaskaddress => {\n        try {\n          const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress);\n\n          // Filter out empty strings from tokenURIs\n          const filteredTokenURIs = tokenURIs.filter(tokenUri => tokenUri && tokenUri.trim() !== '');\n          const getSuccessfullyBoughtTokens = await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken = [];\n          if (getSuccessfullyBoughtTokens.length !== 0) {\n            for (let i = 0; i < getSuccessfullyBoughtTokens.length; i++) {\n              const tokenUri = await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i]);\n              if (tokenUri && tokenUri.trim() !== '') {\n                tokenUriOfBoughtToken.push(tokenUri);\n              }\n            }\n          }\n          const combinedTokenURIsSet = new Set([...filteredTokenURIs, ...tokenUriOfBoughtToken]);\n          if (combinedTokenURIsSet.size === 0) {\n            console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n          } else {\n            const finalFilteredTokenURIs = Array.from(combinedTokenURIsSet);\n            console.log(finalFilteredTokenURIs, \"tokenuri from profile\");\n            setNFTs(finalFilteredTokenURIs);\n          }\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          console.log(address, \"metamask address\");\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n        component: \"img\",\n        src: tokenURI.image,\n        alt: `NFT ${tokenURI}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          children: \"NFT Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: \"NFT Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/listnftforsale\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"List NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Card","CardMedia","CardContent","Typography","Link","nftcontract","marketplaceContract","jsxDEV","_jsxDEV","Profile","_s","nfts","setNFTs","apiData","fetchNFTs","Metamaskaddress","tokenURIs","getOwnedNFTs","filteredTokenURIs","filter","tokenUri","trim","getSuccessfullyBoughtTokens","tokenUriOfBoughtToken","length","i","tokenURI","push","combinedTokenURIsSet","Set","size","console","log","finalFilteredTokenURIs","Array","from","error","window","ethereum","enable","web3","accounts","eth","getAccounts","address","children","map","index","component","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","to","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\n// import abi from 'abi/ERC721Contract.json'\n// import { ethers } from 'ethers';\nimport React, { useState ,useEffect} from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\n// import marketplaceabi from 'abi/marketplace.json'\nimport { nftcontract, marketplaceContract } from 'web3config/web3config';\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n  useEffect(()=>{\n    const  apiData = async() => {\n      // const fetchNFTs = async (Metamaskaddress) => {\n      //    try {\n      //     const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress );\n      //     const getSuccessfullyBoughtTokens= await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n      //     const tokenUriOfBoughtToken=[];\n      //     if(getSuccessfullyBoughtTokens.length!==0){\n      //       for(let i=0;i<getSuccessfullyBoughtTokens.length;i++){\n      //        tokenUriOfBoughtToken[i]= await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i])\n      //       }\n      //     }\n      //     const combinedTokenURIsSet = new Set([...tokenURIs, ...tokenUriOfBoughtToken]);\n      //     if (combinedTokenURIsSet.size === 0) {\n      //       console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n      //     } else {\n      //       const filteredTokenURIs = Array.from(combinedTokenURIsSet);\n      //       console.log(filteredTokenURIs, \"tokenuri from profile\");\n      //       setNFTs(filteredTokenURIs);\n      //     }\n      \n      //   } catch (error) {\n      //     console.error('Error fetching NFTs:', error);\n      //   }\n      // };\n      const fetchNFTs = async (Metamaskaddress) => {\n        try {\n          const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress);\n      \n          // Filter out empty strings from tokenURIs\n          const filteredTokenURIs = tokenURIs.filter(tokenUri => tokenUri && tokenUri.trim() !== '');\n      \n          const getSuccessfullyBoughtTokens = await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken = [];\n      \n          if (getSuccessfullyBoughtTokens.length !== 0) {\n            for (let i = 0; i < getSuccessfullyBoughtTokens.length; i++) {\n              const tokenUri = await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i]);\n              if (tokenUri && tokenUri.trim() !== '') {\n                tokenUriOfBoughtToken.push(tokenUri);\n              }\n            }\n          }\n      \n          const combinedTokenURIsSet = new Set([...filteredTokenURIs, ...tokenUriOfBoughtToken]);\n          if (combinedTokenURIsSet.size === 0) {\n            console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n          } else {\n            const finalFilteredTokenURIs = Array.from(combinedTokenURIsSet);\n            console.log(finalFilteredTokenURIs, \"tokenuri from profile\");\n            setNFTs(finalFilteredTokenURIs);\n          }\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      \n      \n      \n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                console.log(address,\"metamask address\");\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n    };\n    apiData()\n  },[])\n \n  return (\n    <div>\n      {/* <button onClick={connectToMetamask}>Connect to Metamask</button> */}\n      \n        {nfts.map((tokenURI, index) => (\n          <Card key={index}>\n            {/* Display NFT image */}\n            <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${tokenURI}`} />\n{/* {console.log(tokenURI.image)} */}\n            <CardContent>\n              {/* Display NFT details */}\n              <Typography variant=\"h5\" component=\"div\">\n                NFT Title\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n              NFT Description\n              </Typography>\n              <Link to='/listnftforsale'>\n              <button >List NFT</button>\n              </Link>\n            </CardContent>\n          </Card>\n        ))}\n      </div> \n  );\n};\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}