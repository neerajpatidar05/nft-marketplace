{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\";\nimport React from 'react';\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function Profile() {\n  const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\n  const contractabi = abi.abi;\n  const {\n    ethereum\n  } = window;\n  if (ethereum) {}\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const contractss = new ethers.Contract(address, contractabi, signer);\n  const trx = await contractss.safeMint();\n  await trx.wait();\n  console.log(\"minted successfully\");\n  alert(`NFT Minted successfully ${trx.hash}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","abi","ethers","jsxDEV","_jsxDEV","Profile","address","contractabi","ethereum","window","provider","providers","Web3Provider","signer","getSigner","contractss","Contract","trx","safeMint","wait","console","log","alert","hash","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nasync function Profile() {\n    const address = '0xe26b581be9c151b31ce96691078ebc81d0a30f1d';\nconst contractabi = abi.abi;\nconst { ethereum } = window;\nif (ethereum){\n    \n}\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\nconst contractss = new ethers.Contract(address, contractabi,signer);\nconst trx=await contractss.safeMint();\n\t\t\t\t\tawait trx.wait();\n\t\t\t\t\tconsole.log(\"minted successfully\");\n\t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n  return (\n    <div>\n\n    </div>\n  )\n}\n\nexport default Profile"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,yBAAyB;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,eAAeC,OAAOA,CAAA,EAAG;EACrB,MAAMC,OAAO,GAAG,4CAA4C;EAChE,MAAMC,WAAW,GAAGN,GAAG,CAACA,GAAG;EAC3B,MAAM;IAAEO;EAAS,CAAC,GAAGC,MAAM;EAC3B,IAAID,QAAQ,EAAC,CAEb;EACA,MAAME,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAS,CAACC,YAAY,CAACJ,QAAQ,CAAC;EAC5D,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;EACnC,MAAMC,UAAU,GAAG,IAAIb,MAAM,CAACc,QAAQ,CAACV,OAAO,EAAEC,WAAW,EAACM,MAAM,CAAC;EACnE,MAAMI,GAAG,GAAC,MAAMF,UAAU,CAACG,QAAQ,CAAC,CAAC;EAChC,MAAMD,GAAG,CAACE,IAAI,CAAC,CAAC;EAChBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EAClCC,KAAK,CAAE,2BAA0BL,GAAG,CAACM,IAAK,EAAC,CAAC;EAC/C,oBACEnB,OAAA;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV;AAACC,EAAA,GAnBcvB,OAAO;AAqBtB,eAAeA,OAAO;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}