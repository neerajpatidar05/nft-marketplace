{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/NftLists.js\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { Box, Grid, styled } from '@mui/material';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport NFTCard from './NftCard';\nimport abi from 'abi/marketplace.json';\nimport { ethers } from 'ethers';\nimport Web3 from 'web3';\nimport { nftcontract, marketplaceContract } from 'web3config/web3config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardBody = styled(Box)(() => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `);\n_c = CardBody;\nconst Body = styled(Card)(() => `\n  width:20%;\n  margin-bottom:2%;\n  cursor:pointer;\n  border: 1px solid;\n  box-shadow: 5px 4px #342929;\n  border-radius: 6%;\n\n\n}\n  `);\n_c2 = Body;\nfunction NftLists(props) {\n  _s();\n  const navigate = useNavigate();\n  const [data, setData] = useState([]);\n  const [Page, setPage] = useState(4);\n  const {\n    testdata\n  } = props;\n  // console.log(testdata.length)\n\n  // useEffect(()=>{\n  //   const  apiData = async() => {\n  //     console.log(\"call\")\n  //    const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n  //     const jsonData = await response.json();\n  //     console.log(jsonData) \n  //     setData(jsonData.data)\n  //   };\n  //   apiData()\n  // },[])\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      const fetchNFTs = async () => {\n        try {\n          // const address = '0xf43E9272E7c505d658cAC2c07Ee551f3dDF18Ac0';\n          // const contractabi = abi.abi;\n          // const { ethereum } = window;\n          // const provider = new ethers.providers.Web3Provider(ethereum);\n          // const signer = provider.getSigner();\n          // const nftcontract = new ethers.Contract(address, contractabi,signer);\n          const tokenURIs = await marketplaceContract.getListedTokens();\n          console.log(tokenURIs.length, \"length\");\n          console.log(tokenURIs, \"pure tokenuris\");\n          for (let i = 0; i < tokenURIs.length; i++) {\n            if (tokenURIs[i].seller !== '0x0000000000000000000000000000000000000000') setNFTs(tokenURIs);\n          }\n          console.log(nfts, \"tokenurisssss1111\");\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: nfts === null || nfts === void 0 ? void 0 : nfts.map(d => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Body, {\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/details\",\n                state: {\n                  d: d\n                },\n                children: /*#__PURE__*/_jsxDEV(NFTCard, {\n                  data: d\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 16\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 16\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(NftLists, \"rMqRMXv+fxwCFHaT5wPkZEzeabs=\", false, function () {\n  return [useNavigate];\n});\n_c3 = NftLists;\n;\n// const  fetchMoreData = async() => {\n//     setPage(Page +1)\n//     const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n//     const jsonData = await response.json();\n//     setData(jsonData.data)\n//     setData(data.concat(jsonData.data))\n\n// };\n// return (\n//   <>\n//    <InfiniteScroll\n//         dataLength={data?.length}\n//         next={fetchMoreData}\n//         hasMore={true}\n//         loader={<h4>Loading...</h4>}\n//       >\n\n//   {console.log(\"data\",data)}\n//     <CardBody>\n//       {data?.map((d) => {\n//         return (\n//           <>\n\n//             <Body >\n//             <Link to=\"/details\" state={{ d: d }}>\n//              <NFTCard data={d}/>\n//               </Link>\n//             </Body>\n\n//           </>\n//         )\n//       })}\n//     </CardBody>\n\n//     </InfiniteScroll>\n//   </>\n// )\n//}\n\nexport default NftLists;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CardBody\");\n$RefreshReg$(_c2, \"Body\");\n$RefreshReg$(_c3, \"NftLists\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardActions","CardContent","CardMedia","Button","Typography","Box","Grid","styled","Link","useNavigate","InfiniteScroll","NFTCard","abi","ethers","Web3","nftcontract","marketplaceContract","jsxDEV","_jsxDEV","Fragment","_Fragment","CardBody","_c","Body","_c2","NftLists","props","_s","navigate","data","setData","Page","setPage","testdata","nfts","setNFTs","apiData","fetchNFTs","tokenURIs","getListedTokens","console","log","length","i","seller","error","window","ethereum","enable","web3","accounts","eth","getAccounts","address","children","map","d","to","state","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/NftLists.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react'\nimport Card from '@mui/material/Card'\nimport CardActions from '@mui/material/CardActions'\nimport CardContent from '@mui/material/CardContent'\nimport CardMedia from '@mui/material/CardMedia'\nimport Button from '@mui/material/Button'\nimport Typography from '@mui/material/Typography'\nimport { Box, Grid, styled } from '@mui/material'\nimport { Link, useNavigate } from \"react-router-dom\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport NFTCard from './NftCard'\nimport abi from 'abi/marketplace.json'\nimport { ethers } from 'ethers';\nimport Web3 from 'web3';\nimport { nftcontract ,marketplaceContract} from 'web3config/web3config'\nconst CardBody = styled(Box)(\n  () => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `,\n)\n\nconst Body = styled(Card)(\n  () => `\n  width:20%;\n  margin-bottom:2%;\n  cursor:pointer;\n  border: 1px solid;\n  box-shadow: 5px 4px #342929;\n  border-radius: 6%;\n\n\n}\n  `,\n)\n\nfunction NftLists(props) {\n  const navigate = useNavigate();\n  const [data,setData]=useState([])\n  const [Page,setPage]=useState(4)\n\n\n\n  const { testdata } = props\n  // console.log(testdata.length)\n\n  // useEffect(()=>{\n  //   const  apiData = async() => {\n  //     console.log(\"call\")\n  //    const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n  //     const jsonData = await response.json();\n  //     console.log(jsonData) \n  //     setData(jsonData.data)\n  //   };\n  //   apiData()\n  // },[])\n  const [nfts, setNFTs] = useState([]);\n  useEffect(()=>{\n    const  apiData = async() => {\n      const fetchNFTs = async () => {\n        try {\n          // const address = '0xf43E9272E7c505d658cAC2c07Ee551f3dDF18Ac0';\n          // const contractabi = abi.abi;\n          // const { ethereum } = window;\n          // const provider = new ethers.providers.Web3Provider(ethereum);\n          // const signer = provider.getSigner();\n          // const nftcontract = new ethers.Contract(address, contractabi,signer);\n          const tokenURIs = await marketplaceContract.getListedTokens();\n          console.log(tokenURIs.length,\"length\");\n          console.log(tokenURIs,\"pure tokenuris\");\n        for(let i=0;i<tokenURIs.length;i++){\n          if(tokenURIs[i].seller!=='0x0000000000000000000000000000000000000000')\n          setNFTs(tokenURIs);\n        }\n          console.log(nfts,\"tokenurisssss1111\");\n         \n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n\n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }         \n    };\n    apiData()\n  },[])\n  return (\n    <div>\n      {/* <button onClick={connectToMetamask}>Connect to Metamask</button> */}\n       <div>\n        {\n//         nfts.map((tokenURI, index) => (\n//           <Card key={index}>\n//             {/* Display NFT image */}\n//             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${tokenURI}`} />\n// {/* {console.log(tokenURI.image)} */}\n//             <CardContent>\n//               {/* Display NFT details */}\n//               <Typography variant=\"h5\" component=\"div\">\n//                 NFT Title\n//               </Typography>\n//               <Typography variant=\"body2\" color=\"text.secondary\">\n//               NFT Description\n//               </Typography>\n//             </CardContent>\n//           </Card>\n//         ))\n        }\n      <CardBody> \n       {nfts?.map((d) => {\n           return (\n             <>\n               <Body>\n               <Link to=\"/details\" state={{ d: d }}>\n                <NFTCard data={d}/>\n               </Link>\n               </Body>\n             </>\n           )\n         })}\n       </CardBody>\n      </div> \n    </div>\n  );\n};\n  // const  fetchMoreData = async() => {\n  //     setPage(Page +1)\n  //     const response = await fetch(`https://api.instantwebtools.net/v1/passenger?page=${Page}&size=10`);\n  //     const jsonData = await response.json();\n  //     setData(jsonData.data)\n  //     setData(data.concat(jsonData.data))\n   \n  // };\n  // return (\n  //   <>\n  //    <InfiniteScroll\n  //         dataLength={data?.length}\n  //         next={fetchMoreData}\n  //         hasMore={true}\n  //         loader={<h4>Loading...</h4>}\n  //       >\n  \n  //   {console.log(\"data\",data)}\n  //     <CardBody>\n  //       {data?.map((d) => {\n  //         return (\n  //           <>\n            \n  //             <Body >\n  //             <Link to=\"/details\" state={{ d: d }}>\n  //              <NFTCard data={d}/>\n  //               </Link>\n  //             </Body>\n          \n            \n  //           </>\n  //         )\n  //       })}\n  //     </CardBody>\n\n  //     </InfiniteScroll>\n  //   </>\n  // )\n//}\n\nexport default NftLists\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}