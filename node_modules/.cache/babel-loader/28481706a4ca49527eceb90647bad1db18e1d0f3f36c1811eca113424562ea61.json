{"ast":null,"code":"var _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n\n  //   const connectToMetamask = async () => {\n  //     // Check if Metamask is installed and request account access\n  //     if (typeof window.ethereum !== 'undefined') {\n  //       try {\n  //         await window.ethereum.enable();\n  //         const web3 = new Web3(window.ethereum);\n  //         const accounts = await web3.eth.getAccounts();\n  //         const address = accounts[0];\n  //         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n  //         fetchNFTs(address);\n  //       } catch (error) {\n  //         console.error('Error connecting to Metamask:', error);\n  //       }\n  //     } else {\n  //       console.error('Metamask is not installed');\n  //     }\n  //   };\n\n  //   const fetchNFTs = async (Metamaskaddress) => {\n  //     try {\n  //            // Replace with your contract address and ABI\n  //       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n  //       const contractabi = abi.abi;\n  //       const { ethereum } = window;\n  //       const provider = new ethers.providers.Web3Provider(ethereum);\n  //       const signer = provider.getSigner();\n  //       const contractss = new ethers.Contract(address, contractabi,signer);\n  //       console.log(contractss,\"contractssssssssssssssss\");\n  //       // Call the getOwnedNFTs function in the smart contract\n  //       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n  //       console.log(tokenURIs,'tokenuriiiiiii');\n  //       // Set the retrieved NFTs in the component state\n  //       setNFTs(tokenURIs);\n  //     } catch (error) {\n  //       console.error('Error fetching NFTs:', error);\n  //     }\n  //   };\n\n  //   return (\n  //     <div>\n  //       <button onClick={connectToMetamask}>Connect to Metamask</button>\n  //        <div>\n  //         {nfts.map((tokenURI, index) => (\n  //           <Card key={index}>\n  //             {/* Display NFT image */}\n  //             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n  // {/* {console.log(tokenURI.image)} */}\n  //             <CardContent>\n  //               {/* Display NFT details */}\n  //               <Typography variant=\"h5\" component=\"div\">\n  //                 NFT Title\n  //               </Typography>\n  //               <Typography variant=\"body2\" color=\"text.secondary\">\n  //               NFT Description\n  //               </Typography>\n  //             </CardContent>\n  //           </Card>\n  //         ))}\n\n  //       </div> \n  //     </div>\n  //   );\n};\n_s(Profile, \"siP5CtpxIdpYAZcq74Cck5237gY=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","Web3","Card","CardMedia","CardContent","Typography","Profile","_s","nfts","setNFTs","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n//   const connectToMetamask = async () => {\n//     // Check if Metamask is installed and request account access\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         await window.ethereum.enable();\n//         const web3 = new Web3(window.ethereum);\n//         const accounts = await web3.eth.getAccounts();\n//         const address = accounts[0];\n//         console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n//         fetchNFTs(address);\n//       } catch (error) {\n//         console.error('Error connecting to Metamask:', error);\n//       }\n//     } else {\n//       console.error('Metamask is not installed');\n//     }\n//   };\n\n//   const fetchNFTs = async (Metamaskaddress) => {\n//     try {\n//            // Replace with your contract address and ABI\n//       const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n//       const contractabi = abi.abi;\n//       const { ethereum } = window;\n//       const provider = new ethers.providers.Web3Provider(ethereum);\n//       const signer = provider.getSigner();\n//       const contractss = new ethers.Contract(address, contractabi,signer);\n//       console.log(contractss,\"contractssssssssssssssss\");\n//       // Call the getOwnedNFTs function in the smart contract\n//       const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n//       console.log(tokenURIs,'tokenuriiiiiii');\n//       // Set the retrieved NFTs in the component state\n//       setNFTs(tokenURIs);\n//     } catch (error) {\n//       console.error('Error fetching NFTs:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <button onClick={connectToMetamask}>Connect to Metamask</button>\n//        <div>\n//         {nfts.map((tokenURI, index) => (\n//           <Card key={index}>\n//             {/* Display NFT image */}\n//             <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n// {/* {console.log(tokenURI.image)} */}\n//             <CardContent>\n//               {/* Display NFT details */}\n//               <Typography variant=\"h5\" component=\"div\">\n//                 NFT Title\n//               </Typography>\n//               <Typography variant=\"body2\" color=\"text.secondary\">\n//               NFT Description\n//               </Typography>\n//             </CardContent>\n//           </Card>\n//         ))}\n        \n//       </div> \n//     </div>\n//   );\n};\n\nexport default Profile;\n"],"mappings":";AAAA;AACA,OAAOA,GAAG,MAAM,yBAAyB;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,eAAe;AAExE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AACA,CAAC;AAACO,EAAA,CAjEID,OAAO;AAAAI,EAAA,GAAPJ,OAAO;AAmEb,eAAeA,OAAO;AAAC,IAAAI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}