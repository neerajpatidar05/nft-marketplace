{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\n// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json';\nimport { ethers } from 'ethers';\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  const connectToMetamask = async () => {\n    // Check if Metamask is installed and request account access\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        const web3 = new Web3(window.ethereum);\n        const accounts = await web3.eth.getAccounts();\n        const address = accounts[0];\n        console.log(address, \"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\");\n        fetchNFTs(address);\n      } catch (error) {\n        console.error('Error connecting to Metamask:', error);\n      }\n    } else {\n      console.error('Metamask is not installed');\n    }\n  };\n  const fetchNFTs = async Metamaskaddress => {\n    try {\n      // Replace with your contract address and ABI\n      const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n      const contractabi = abi.abi;\n      const {\n        ethereum\n      } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contractss = new ethers.Contract(address, contractabi, signer);\n      console.log(contractss, \"contractssssssssssssssss\");\n      // Call the getOwnedNFTs function in the smart contract\n      const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress);\n      console.log(tokenURIs, 'tokenuriiiiiii');\n      // Set the retrieved NFTs in the component state\n      setNFTs(tokenURIs);\n    } catch (error) {\n      console.error('Error fetching NFTs:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToMetamask,\n      children: \"Connect to Metamask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          component: \"img\",\n          src: tokenURI.image,\n          alt: `NFT ${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            component: \"div\",\n            children: \"NFT Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: \"NFT Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"siP5CtpxIdpYAZcq74Cck5237gY=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["abi","ethers","React","useState","Web3","Card","CardMedia","CardContent","Typography","jsxDEV","_jsxDEV","Profile","_s","nfts","setNFTs","connectToMetamask","window","ethereum","enable","web3","accounts","eth","getAccounts","address","console","log","fetchNFTs","error","Metamaskaddress","contractabi","provider","providers","Web3Provider","signer","getSigner","contractss","Contract","tokenURIs","getOwnedNFTs","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","tokenURI","index","component","src","image","alt","variant","color","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["// // import React from 'react'\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n  const connectToMetamask = async () => {\n    // Check if Metamask is installed and request account access\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        await window.ethereum.enable();\n        const web3 = new Web3(window.ethereum);\n        const accounts = await web3.eth.getAccounts();\n        const address = accounts[0];\n        console.log(address,\"meta address--------------------------------->>>>>>>>>>>>>>>>>>>>\")\n        fetchNFTs(address);\n      } catch (error) {\n        console.error('Error connecting to Metamask:', error);\n      }\n    } else {\n      console.error('Metamask is not installed');\n    }\n  };\n\n  const fetchNFTs = async (Metamaskaddress) => {\n    try {\n           // Replace with your contract address and ABI\n      const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n      const contractabi = abi.abi;\n      const { ethereum } = window;\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const contractss = new ethers.Contract(address, contractabi,signer);\n      console.log(contractss,\"contractssssssssssssssss\");\n      // Call the getOwnedNFTs function in the smart contract\n      const tokenURIs = await contractss.getOwnedNFTs(Metamaskaddress );\n      console.log(tokenURIs,'tokenuriiiiiii');\n      // Set the retrieved NFTs in the component state\n      setNFTs(tokenURIs);\n    } catch (error) {\n      console.error('Error fetching NFTs:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={connectToMetamask}>Connect to Metamask</button>\n       <div>\n        {nfts.map((tokenURI, index) => (\n          <Card key={index}>\n            {/* Display NFT image */}\n            <CardMedia component=\"img\" src={tokenURI.image} alt={`NFT ${index}`} />\n{/* {console.log(tokenURI.image)} */}\n            <CardContent>\n              {/* Display NFT details */}\n              <Typography variant=\"h5\" component=\"div\">\n                NFT Title\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n              NFT Description\n              </Typography>\n            </CardContent>\n          </Card>\n        ))}\n        \n      </div> \n    </div>\n  );\n};\n\nexport default Profile;\n"],"mappings":";;AAAA;AACA,OAAOA,GAAG,MAAM,yBAAyB;AACzC,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,IAAI,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC;IACA,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC9B,MAAMC,IAAI,GAAG,IAAIf,IAAI,CAACY,MAAM,CAACC,QAAQ,CAAC;QACtC,MAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAG,CAACC,WAAW,CAAC,CAAC;QAC7C,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAC3BI,OAAO,CAACC,GAAG,CAACF,OAAO,EAAC,mEAAmE,CAAC;QACxFG,SAAS,CAACH,OAAO,CAAC;MACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC,MAAM;MACLH,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAC;IAC5C;EACF,CAAC;EAED,MAAMD,SAAS,GAAG,MAAOE,eAAe,IAAK;IAC3C,IAAI;MACG;MACL,MAAML,OAAO,GAAG,4CAA4C;MAC5D,MAAMM,WAAW,GAAG7B,GAAG,CAACA,GAAG;MAC3B,MAAM;QAAEiB;MAAS,CAAC,GAAGD,MAAM;MAC3B,MAAMc,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,SAAS,CAACC,YAAY,CAACf,QAAQ,CAAC;MAC5D,MAAMgB,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;MACnC,MAAMC,UAAU,GAAG,IAAIlC,MAAM,CAACmC,QAAQ,CAACb,OAAO,EAAEM,WAAW,EAACI,MAAM,CAAC;MACnET,OAAO,CAACC,GAAG,CAACU,UAAU,EAAC,0BAA0B,CAAC;MAClD;MACA,MAAME,SAAS,GAAG,MAAMF,UAAU,CAACG,YAAY,CAACV,eAAgB,CAAC;MACjEJ,OAAO,CAACC,GAAG,CAACY,SAAS,EAAC,gBAAgB,CAAC;MACvC;MACAvB,OAAO,CAACuB,SAAS,CAAC;IACpB,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEjB,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MAAQ8B,OAAO,EAAEzB,iBAAkB;MAAAwB,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/DlC,OAAA;MAAA6B,QAAA,EACE1B,IAAI,CAACgC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACxBrC,OAAA,CAACL,IAAI;QAAAkC,QAAA,gBAEH7B,OAAA,CAACJ,SAAS;UAAC0C,SAAS,EAAC,KAAK;UAACC,GAAG,EAAEH,QAAQ,CAACI,KAAM;UAACC,GAAG,EAAG,OAAMJ,KAAM;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEvElC,OAAA,CAACH,WAAW;UAAAgC,QAAA,gBAEV7B,OAAA,CAACF,UAAU;YAAC4C,OAAO,EAAC,IAAI;YAACJ,SAAS,EAAC,KAAK;YAAAT,QAAA,EAAC;UAEzC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACblC,OAAA,CAACF,UAAU;YAAC4C,OAAO,EAAC,OAAO;YAACC,KAAK,EAAC,gBAAgB;YAAAd,QAAA,EAAC;UAEnD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA,GAZLG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAaV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CAjEID,OAAO;AAAA2C,EAAA,GAAP3C,OAAO;AAmEb,eAAeA,OAAO;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}