{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from 'abi/ERC721Contract.json';\nimport marketplaceabi from 'abi/marketplace.json';\nfunction ListonUI() {\n  _s();\n  const [listedNFTs, setListedNFTs] = useState([]);\n  useEffect(() => {\n    fetchListedNFTs();\n  }, []);\n  const fetchListedNFTs = async () => {\n    const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\n    const nftcontractabi = abi.abi;\n    const {\n      ethereum\n    } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const nftcontracts = new ethers.Contract(address, nftcontractabi, signer);\n    const marketplacecontractabi = marketplaceabi.abi;\n    const marketplaceaddress = '0xf46C0cc8f72E3200770dF2D63e62D9Ac50A6d090';\n    const marketplaceContract = new ethers.Contract(marketplaceaddress, marketplacecontractabi, signer);\n    // Call the getlistedtoken() function of the marketplace contract to get the array of listed NFTs\n    const listedTokens = await marketplaceContract.getListedTokens();\n    console.log(listedTokens, \"listed tokensssssssssss\");\n    // Iterate through the listedTokens array and fetch the token URIs\n    const listedNFTsWithURIs = await Promise.all(listedTokens.map(async token => {\n      const tokenURI = await nftcontracts.tokenURI(token.tokenId);\n      console.log(tokenURI, \"kkkkkk\");\n      return {\n        ...token,\n        tokenURI\n      };\n    }));\n    // console.log(listedNFTsWithURIs[0].tokenURI,\"listed NFT With URLs\");\n    setListedNFTs(listedNFTsWithURIs);\n  };\n  return;\n  // return (\n  //   <div>\n  //     <h1>Listed NFTs</h1>\n  //     {listedNFTs.map((nft) => (\n\n  //       <div key={nft.tokenId}>\n\n  //         <img src={`https://gateway.pinata.cloud/ipfs/Qmb4aNkjZ9XAkWwFndpBYWfdmHr5vRHYkNahH5R3fdQR2a`} alt={`NFT ${nft.tokenId}`} />\n  //         <p>Description: {nft.tokenURI}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n}\n_s(ListonUI, \"f8HLj3Gezol4xy0J/MkvSeLoqPs=\");\n_c = ListonUI;\nexport default ListonUI;\nvar _c;\n$RefreshReg$(_c, \"ListonUI\");","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","marketplaceabi","ListonUI","_s","listedNFTs","setListedNFTs","fetchListedNFTs","address","nftcontractabi","ethereum","window","provider","providers","Web3Provider","signer","getSigner","nftcontracts","Contract","marketplacecontractabi","marketplaceaddress","marketplaceContract","listedTokens","getListedTokens","console","log","listedNFTsWithURIs","Promise","all","map","token","tokenURI","tokenId","_c","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/ListonUI.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport abi from 'abi/ERC721Contract.json'\nimport marketplaceabi from 'abi/marketplace.json'\nfunction ListonUI() {\n  const [listedNFTs, setListedNFTs] = useState([]);\n\n  useEffect(() => {\n    fetchListedNFTs();\n  }, []);\n\n  const fetchListedNFTs = async () => {\n    const address = '0xd014b5697fCf686DF723069706c44ca8cC4718Cb';\nconst nftcontractabi = abi.abi;\n\nconst { ethereum } = window;\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\n\nconst nftcontracts = new ethers.Contract(address, nftcontractabi,signer);\nconst marketplacecontractabi = marketplaceabi.abi;\nconst marketplaceaddress='0xf46C0cc8f72E3200770dF2D63e62D9Ac50A6d090';\nconst marketplaceContract=new ethers.Contract(marketplaceaddress, marketplacecontractabi,signer);\n    // Call the getlistedtoken() function of the marketplace contract to get the array of listed NFTs\n    const listedTokens = await marketplaceContract.getListedTokens();\nconsole.log(listedTokens,\"listed tokensssssssssss\");\n    // Iterate through the listedTokens array and fetch the token URIs\n    const listedNFTsWithURIs = await Promise.all(\n      listedTokens.map(async (token) => {\n        const tokenURI = await nftcontracts.tokenURI(token.tokenId);\n        console.log(tokenURI,\"kkkkkk\");\n        return { ...token, tokenURI };\n      })\n    );\n// console.log(listedNFTsWithURIs[0].tokenURI,\"listed NFT With URLs\");\n    setListedNFTs(listedNFTsWithURIs);\n  };\nreturn\n  // return (\n  //   <div>\n  //     <h1>Listed NFTs</h1>\n  //     {listedNFTs.map((nft) => (\n        \n  //       <div key={nft.tokenId}>\n          \n  //         <img src={`https://gateway.pinata.cloud/ipfs/Qmb4aNkjZ9XAkWwFndpBYWfdmHr5vRHYkNahH5R3fdQR2a`} alt={`NFT ${nft.tokenId}`} />\n  //         <p>Description: {nft.tokenURI}</p>\n  //       </div>\n  //     ))}\n  //   </div>\n  // );\n}\n\nexport default ListonUI;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,GAAG,MAAM,yBAAyB;AACzC,OAAOC,cAAc,MAAM,sBAAsB;AACjD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACdS,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,OAAO,GAAG,4CAA4C;IAChE,MAAMC,cAAc,GAAGR,GAAG,CAACA,GAAG;IAE9B,MAAM;MAAES;IAAS,CAAC,GAAGC,MAAM;IAC3B,MAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAS,CAACC,YAAY,CAACJ,QAAQ,CAAC;IAC5D,MAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;IAEnC,MAAMC,YAAY,GAAG,IAAIjB,MAAM,CAACkB,QAAQ,CAACV,OAAO,EAAEC,cAAc,EAACM,MAAM,CAAC;IACxE,MAAMI,sBAAsB,GAAGjB,cAAc,CAACD,GAAG;IACjD,MAAMmB,kBAAkB,GAAC,4CAA4C;IACrE,MAAMC,mBAAmB,GAAC,IAAIrB,MAAM,CAACkB,QAAQ,CAACE,kBAAkB,EAAED,sBAAsB,EAACJ,MAAM,CAAC;IAC5F;IACA,MAAMO,YAAY,GAAG,MAAMD,mBAAmB,CAACE,eAAe,CAAC,CAAC;IACpEC,OAAO,CAACC,GAAG,CAACH,YAAY,EAAC,yBAAyB,CAAC;IAC/C;IACA,MAAMI,kBAAkB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC1CN,YAAY,CAACO,GAAG,CAAC,MAAOC,KAAK,IAAK;MAChC,MAAMC,QAAQ,GAAG,MAAMd,YAAY,CAACc,QAAQ,CAACD,KAAK,CAACE,OAAO,CAAC;MAC3DR,OAAO,CAACC,GAAG,CAACM,QAAQ,EAAC,QAAQ,CAAC;MAC9B,OAAO;QAAE,GAAGD,KAAK;QAAEC;MAAS,CAAC;IAC/B,CAAC,CACH,CAAC;IACL;IACIzB,aAAa,CAACoB,kBAAkB,CAAC;EACnC,CAAC;EACH;EACE;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;AACF;AAACtB,EAAA,CA/CQD,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAiDjB,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}