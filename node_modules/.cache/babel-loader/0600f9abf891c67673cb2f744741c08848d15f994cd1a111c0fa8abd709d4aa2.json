{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { nftcontract, marketplaceContract } from 'web3config/web3config';\nimport { Box, styled } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardBody = styled(Box)(() => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `);\n_c = CardBody;\nconst Body = styled(Card)(() => `\n  width:20%;\n  margin-bottom:2%;\n \n  box-shadow: 1px 1px #342929;\n  border-radius: 0%;\n\n\n}\n  `);\n_c2 = Body;\nconst Profile = () => {\n  _s();\n  const [nfts, setNFTs] = useState([]);\n  useEffect(() => {\n    const apiData = async () => {\n      const fetchNFTs = async Metamaskaddress => {\n        try {\n          const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress);\n          const filteredTokenURIs = tokenURIs.filter(tokenUri => tokenUri && tokenUri.trim() !== '');\n          const getSuccessfullyBoughtTokens = await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken = [];\n          if (getSuccessfullyBoughtTokens.length !== 0) {\n            for (let i = 0; i < getSuccessfullyBoughtTokens.length; i++) {\n              const tokenUri = await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i]);\n              if (tokenUri && tokenUri.trim() !== '') {\n                tokenUriOfBoughtToken.push(tokenUri);\n              }\n            }\n          }\n          const combinedTokenURIsSet = new Set([...filteredTokenURIs, ...tokenUriOfBoughtToken]);\n          // if (combinedTokenURIsSet.size === 0) {\n          //   console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n          // } else {\n          //   const finalFilteredTokenURIs = Array.from(combinedTokenURIsSet);\n          //   console.log(finalFilteredTokenURIs, \"tokenuri from profile\");\n          //   setNFTs(finalFilteredTokenURIs);\n          // }\n          const tokenDataArray = await Promise.all(Array.from(combinedTokenURIsSet).map(async tokenUri => {\n            const tokenId = await nftcontract.getTokenId(tokenUri);\n            return {\n              uri: tokenUri,\n              id: tokenId\n            };\n          }));\n          setNFTs(tokenDataArray);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.enable();\n          const web3 = new Web3(window.ethereum);\n          const accounts = await web3.eth.getAccounts();\n          const address = accounts[0];\n          console.log(address, \"metamask address\");\n          fetchNFTs(address);\n        } catch (error) {\n          console.error('Error connecting to Metamask:', error);\n        }\n      } else {\n        console.error('Metamask is not installed');\n      }\n    };\n    apiData();\n  }, []);\n  const extractImageUrl = metadataUrl => {\n    // Fetch the metadata JSON\n    // You can use libraries like 'axios' or the built-in 'fetch' API\n    fetch(metadataUrl).then(response => response.json()).then(metadata => {\n      // Assuming the metadata structure follows OpenSea-style\n      const imageUrl = metadata.image;\n      return imageUrl;\n    }).catch(error => {\n      console.error('Error fetching metadata:', error);\n      return ''; // Return a default image URL or handle the error case\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(Body, {\n        children: nfts.map((tokenURI, index) => /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            src: \"https://gateway.pinata.cloud/ipfs/Qmb4aNkjZ9XAkWwFndpBYWfdmHr5vRHYkNahH5R3fdQR2a\",\n            alt: `NFT ${tokenURI.id}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: [\"Token Id - \", tokenURI.id.toString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"NFT Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: '/listnftforsale/$',\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                children: \"List NFT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(Profile, \"7phIsx6Y0qCXkIWOSGOTifNBFYQ=\");\n_c3 = Profile;\nexport default Profile;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CardBody\");\n$RefreshReg$(_c2, \"Body\");\n$RefreshReg$(_c3, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Card","CardMedia","CardContent","Typography","Link","nftcontract","marketplaceContract","Box","styled","jsxDEV","_jsxDEV","CardBody","_c","Body","_c2","Profile","_s","nfts","setNFTs","apiData","fetchNFTs","Metamaskaddress","tokenURIs","getOwnedNFTs","filteredTokenURIs","filter","tokenUri","trim","getSuccessfullyBoughtTokens","tokenUriOfBoughtToken","length","i","tokenURI","push","combinedTokenURIsSet","Set","tokenDataArray","Promise","all","Array","from","map","tokenId","getTokenId","uri","id","error","console","window","ethereum","enable","web3","accounts","eth","getAccounts","address","log","extractImageUrl","metadataUrl","fetch","then","response","json","metadata","imageUrl","image","catch","children","index","component","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","variant","toString","color","to","_c3","$RefreshReg$"],"sources":["/home/neeraj/Documents/logistic/NFT_F/src/components/nft/Profile.js"],"sourcesContent":["\nimport React, { useState ,useEffect} from 'react';\nimport Web3 from 'web3';\nimport { Card, CardMedia, CardContent, Typography } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport { nftcontract, marketplaceContract } from 'web3config/web3config';\nimport { Box, styled } from '@mui/material'\nconst CardBody = styled(Box)(\n  () => `\n  \n    margin: 30px 100px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap:2.5%;\n\n}\n  `,\n)\nconst Body = styled(Card)(\n  () => `\n  width:20%;\n  margin-bottom:2%;\n \n  box-shadow: 1px 1px #342929;\n  border-radius: 0%;\n\n\n}\n  `,\n)\n\nconst Profile = () => {\n  const [nfts, setNFTs] = useState([]);\n\n  useEffect(()=>{\n    const  apiData = async() => {\n \n      const fetchNFTs = async (Metamaskaddress) => {\n        try {\n          const tokenURIs = await nftcontract.getOwnedNFTs(Metamaskaddress);\n      \n          const filteredTokenURIs = tokenURIs.filter(tokenUri => tokenUri && tokenUri.trim() !== '');\n      \n          const getSuccessfullyBoughtTokens = await marketplaceContract.getSuccessfullyBoughtTokens(Metamaskaddress);\n          const tokenUriOfBoughtToken = [];\n      \n          if (getSuccessfullyBoughtTokens.length !== 0) {\n            for (let i = 0; i < getSuccessfullyBoughtTokens.length; i++) {\n              const tokenUri = await nftcontract.tokenURI(getSuccessfullyBoughtTokens[i]);\n              if (tokenUri && tokenUri.trim() !== '') {\n                tokenUriOfBoughtToken.push(tokenUri);\n              }\n            }\n          }\n      \n          const combinedTokenURIsSet = new Set([...filteredTokenURIs, ...tokenUriOfBoughtToken]);\n          // if (combinedTokenURIsSet.size === 0) {\n          //   console.log(\"All tokenURIs are empty, skipping setNFTs()\");\n          // } else {\n          //   const finalFilteredTokenURIs = Array.from(combinedTokenURIsSet);\n          //   console.log(finalFilteredTokenURIs, \"tokenuri from profile\");\n          //   setNFTs(finalFilteredTokenURIs);\n          // }\n          const tokenDataArray = await Promise.all(Array.from(combinedTokenURIsSet).map(async (tokenUri) => {\n            const tokenId = await nftcontract.getTokenId(tokenUri);\n            return { uri: tokenUri, id: tokenId };\n          }));\n           setNFTs(tokenDataArray);\n        } catch (error) {\n          console.error('Error fetching NFTs:', error);\n        }\n      };\n      \n      \n      \n      if (typeof window.ethereum !== 'undefined') {\n              try {\n                await window.ethereum.enable();\n                const web3 = new Web3(window.ethereum);\n                const accounts = await web3.eth.getAccounts();\n                const address = accounts[0];\n                console.log(address,\"metamask address\");\n                fetchNFTs(address);\n              } catch (error) {\n                console.error('Error connecting to Metamask:', error);\n              }\n            } else {\n              console.error('Metamask is not installed');\n            }\n    };\n    apiData()\n  },[])\n\n  const extractImageUrl = (metadataUrl) => {\n    // Fetch the metadata JSON\n    // You can use libraries like 'axios' or the built-in 'fetch' API\n    fetch(metadataUrl)\n      .then(response => response.json())\n      .then(metadata => {\n        // Assuming the metadata structure follows OpenSea-style\n        const imageUrl = metadata.image;\n        return imageUrl;\n      })\n      .catch(error => {\n        console.error('Error fetching metadata:', error);\n        return ''; // Return a default image URL or handle the error case\n      });\n  };\n  \n \n  return (\n    <div><CardBody> <Body>\n        {nfts.map((tokenURI, index) => (\n         \n          <Card key={index}>\n            <CardMedia component=\"img\" src='https://gateway.pinata.cloud/ipfs/Qmb4aNkjZ9XAkWwFndpBYWfdmHr5vRHYkNahH5R3fdQR2a'alt= {`NFT ${tokenURI.id}`} />\n            <CardContent>\n              <Typography variant=\"h5\" component=\"div\">\n                Token Id - {tokenURI.id.toString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n              NFT Description\n              </Typography>\n              <Link to={'/listnftforsale/$'}>\n              <button >List NFT</button>\n              </Link>\n            </CardContent>\n          </Card>\n        ))}</Body></CardBody>\n      </div> \n  );\n};\n\nexport default Profile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}