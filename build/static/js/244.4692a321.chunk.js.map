{"version":3,"file":"static/js/244.4692a321.chunk.js","mappings":"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","sources":["contract/index.js","redux/action/nftAction.js","components/nft/CreateNft.js","hook/useIgoApplyHook.js","web3config/web3config.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { isMetaMaskInstalled } from \"utils\";\nimport NFT from \"abi/NftMarketPlace.json\"\nimport Web3 from \"web3\";\nimport { RPC_URLS } from \"constant\";\n\n\n\n\n\nconst getContract =(abi,contractAddress)=>{\n    if (isMetaMaskInstalled()) {\n\t\treturn new Contract(contractAddress, abi);\n\t}\n\treturn;\n}\n\nexport const getWeb3Contract = (chainId, abi, contractAddress) => {\n\tlet web3;\n\tif (isMetaMaskInstalled()) {\n\t\tweb3 = new Web3(window.ethereum);\n\t} else {\n\t\tweb3 = new Web3(new Web3.providers.HttpProvider(RPC_URLS?.[chainId]));\n\t}\n\n\treturn new web3.eth.Contract(abi, contractAddress);\n};\n\n\n\nexport const web3NftContract = ({ address, chainId }) => {\n\tif (!address) {\n\t\treturn null;\n\t}\n\n\treturn getWeb3Contract(chainId, NFT, address);\n};","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { web3NftContract } from \"contract\";\n\n\nexport const createNftAction =createAsyncThunk(\n    \"nft/createNft\",\n    async(data,{ getState, rejectWithValue, dispatch }) =>{\n        console.log(\"data\",data)\n    try{\n        const NftCreate = web3NftContract({\n        });\n\n        console.log('NftCreate', NftCreate)\n\n    }catch(e){\n        console.log(\"e----Action\",e)\n    }\n    }\n    );","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport { Box } from '@mui/material'\nimport { useIgoApply } from 'hook/useIgoApplyHook'\nimport React from 'react'\n\nfunction CreateNft() {\n  const {\n    formik,\n    coverImage,\n    onCoverImageChange,\n    setButtonStatus,\n    buttonStatus,\n  } = useIgoApply()\n  return (\n    <>\n      <Box>\n        <div className=\"gamfi-breadcrumbs-section\">\n          <div className=\"container\">\n            <div className=\"apply-heading text-center\">\n              <h2 className=\"mb-0\">Create New NFT</h2>\n            </div>\n          </div>\n        </div>\n        <div className=\"gamfi-form-content pt-65 md-pt-45 pb-120 md-pb-80\">\n          <div className=\"container\">\n            <div className=\"address-form\">\n              <form\n                noValidate\n                onSubmit={formik.handleSubmit}\n                // autocomplete=\"off\"\n              >\n                <div>\n                  <h4 className=\"mb-0\">1. Project Details</h4>\n                  <p className=\"text-white\">\n                    Please complete the required project details\n                  </p>\n                </div>\n                <div className=\"input-button\">\n                  <div className=\"file-upload\">\n                    <div className=\"image-upload-wrap\">\n                      <input\n                        className=\"file-upload-input\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        required={true}\n                        name=\"coverImage\"\n                        onChange={\n                        \tonCoverImageChange\n                        }\n                        onBlur={formik.handleBlur}\n                      />\n                      <div className=\"drag-text\">\n                        {coverImage ? (\n                          <img\n                            src={coverImage}\n                            alt=\"project image\"\n                          />\n                        ) : (\n                          <>\n                            <svg\n                              className=\"mx-auto upload-icon-svg h-12 w-12 text-gray-400\"\n                              stroke=\"currentColor\"\n                              fill=\"none\"\n                              viewBox=\"0 0 48 48\"\n                              aria-hidden=\"true\"\n                            >\n                              <path\n                                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                                strokeWidth={2}\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                              />\n                            </svg>\n                            <p className=\"form-text text-white\">\n                              Upload a file or drag and drop\n                            </p>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <label htmlFor=\"project-cover\" className=\"text-white\">\n                    Project Background *\n                  </label>\n                  <div className=\"form-text text-white\">\n\t\t\t\t\t\t\t\t\t\t\t{Boolean(\n\t\t\t\t\t\t\t\t\t\t\t\tformik.touched.coverImage &&\n\t\t\t\t\t\t\t\t\t\t\t\t\tformik.errors.coverImage\n\t\t\t\t\t\t\t\t\t\t\t) ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"form-text text-danger\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{formik.errors.coverImage}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\"NFT Image\"\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <div className=\"input-button\">\n                  <input\n                    type=\"text\"\n                    id=\"nftname\"\n                    placeholder=\"Item Name\"\n                    required={true}\n                    name=\"nftname\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.nftname}\n                  />\n                  <label htmlFor=\"token-address\" className=\"text-white\">\n                    Nft Name *\n                  </label>\n                  <div className=\"form-text text-white\">\n\t\t\t\t\t\t\t\t\t\t\t{Boolean(\n\t\t\t\t\t\t\t\t\t\t\t\tformik.touched.itemname &&\n\t\t\t\t\t\t\t\t\t\t\t\t\tformik.errors.itemname\n\t\t\t\t\t\t\t\t\t\t\t) && (\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"form-text text-danger\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{formik.errors.itemname}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <div className=\"input-button\">\n                  <input\n                    type=\"text\"\n                    id=\"artistname\"\n                    placeholder=\"Artist Name\"\n                    required={true}\n                    name=\"artistname\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.artistname}\n                  />\n                  <label htmlFor=\"token-address\" className=\"text-white\">\n                    Artist Name *\n                  </label>\n                  <div className=\"form-text text-white\">\n\t\t\t\t\t\t\t\t\t\t\t{Boolean(\n\t\t\t\t\t\t\t\t\t\t\t\tformik.touched.artistname &&\n\t\t\t\t\t\t\t\t\t\t\t\t\tformik.errors.artistname\n\t\t\t\t\t\t\t\t\t\t\t) && (\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"form-text text-danger\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{formik.errors.artistname}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <div className=\"input-button\">\n                  <textarea\n                    type=\"text\"\n                    className=\"mb-0\"\n                    rows={3}\n                    id=\"description\"\n                    name=\"description\"\n                    placeholder=\"Description\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.description}\n                  />\n                  <label htmlFor=\"short-desc\" className=\"text-white\">\n                    Description *\n                  </label>\n                  <div className=\"form-text text-white\">\n                    Brief description of your NFT.\n                  </div>\n                  <div className=\"form-text text-white\">\n\t\t\t\t\t\t\t\t\t\t\t{Boolean(\n\t\t\t\t\t\t\t\t\t\t\t\tformik.touched.description &&\n\t\t\t\t\t\t\t\t\t\t\t\t\tformik.errors.description\n\t\t\t\t\t\t\t\t\t\t\t) && (\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"form-text text-danger\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{formik.errors.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <div className=\"project-btn-area text-center black-shape-big mt-40\">\n                  <input\n                    type=\"submit\"\n                    name=\"Mint\"\n                    value={buttonStatus.currentBtnText}\n                    disabled={buttonStatus.disabled}\n                  />\n                  <span className=\"hover-shape1\" />\n                  <span className=\"hover-shape2\" />\n                  <span className=\"hover-shape3\" />\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </Box>\n    </>\n  )\n}\n\nexport default CreateNft\n","/* eslint-disable no-undef */\n/* eslint-disable no-useless-escape */\nimport axios from 'axios';\nimport { useFormik } from \"formik\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { imageWithAndHeight } from \"utils\";\nimport { SUPPORTED_FORMATS } from \"constant\";\nimport { createNftAction } from 'redux/action/nftAction';\nimport { nftcontract } from 'web3config/web3config';\n\nexport const useIgoApply =()=>{\n\t\n\n    const navigate = useNavigate();\n\tconst { active } = useWeb3React();\n\n\tconst [coverImage, setCoverImage] = useState();\n\n\tconst [buttonStatus, setButtonStatus] = useState({\n\t\tcurrentBtnText: \"Mint\",\n\t\tdisabled: false,\n\t});\n\n    const resetState = (helpers) => {\n\t\thelpers.resetForm();\n\t\tnavigate(\"/\");\n\t};\n\n\tconst imageCheck = Yup.addMethod(\n\t\tYup.mixed,\n\t\t\"imageCheck\",\n\t\tfunction (message, requiredWidth, requiredHeight) {\n\t\t\treturn this.test(\n\t\t\t\t\"image-width-height-check\",\n\t\t\t\tmessage,\n\t\t\t\tasync function (value) {\n\t\t\t\t\tconst { path, createError } = this;\n\n\t\t\t\t\tif (!value) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst imgDimensions = await imageWithAndHeight(value);\n\n\t\t\t\t\tif (imgDimensions.width !== requiredWidth) {\n\t\t\t\t\t\treturn createError({\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tmessage: `The file width needs to be the ${requiredWidth}px!`,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (imgDimensions.height !== requiredHeight) {\n\t\t\t\t\t\treturn createError({\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tmessage: `The file height needs to be the ${requiredHeight}px!`,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n\n\tconst [fileImg, setFileImg] = useState(null);\n    const [name, setName] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n\n    const formik = useFormik({\n\t\tinitialValues: {\n\t\t\tnftname: \"\",\n\t\t\tartistname: \"\",\n\t\t\tcoverImage: \"\",\n\t\t\tdescription: \"\",\n\t\t},\n\t\tvalidationSchema: Yup.object({\n            nftname: Yup.string().required(\"nftname is required\"),\n\t\t\tartistname: Yup.string().required(\"artistname is required\"),\n\t\t\tdescription: Yup.string().required(\"description is required\"),\n\t\t\tcoverImage: Yup.mixed()\n\t\t\t\t.required(\"Please select a image\")\n\t\t\t\t.test(\n\t\t\t\t\t\"fileSize\",\n\t\t\t\t\t\"File is too large\",\n\t\t\t\t\t(value) => value?.size <= 2000000\n\t\t\t\t)\n\t\t\t\t.test(\"fileType\", \"Only image are allowed\", (value) =>\n\t\t\t\t\tSUPPORTED_FORMATS.includes(value?.type)\n\t\t\t\t)\n\t\t}),\n\n\t\tonSubmit: async (values, helpers) => {\n\t\t\tconsole.log(\"values NFT\",values)\n\t\t\tconsole.log(\"helpers NFT\",helpers)\n\n\t\t\tconst sendJSONtoIPFS = async (ImgHash) => {\n\n\t\t\t\ttry {\n\t\t\n\t\t\t\t\tconst resJSON = await axios({\n\t\t\t\t\t\tmethod: \"post\",\n\t\t\t\t\t\turl: \"https://api.pinata.cloud/pinning/pinJsonToIPFS\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\"name\":values.nftname,\n\t\t\t\t\t\t\t\"nftname\":values.nftname,\n\t\t\t\t\t\t\t\"artistname\":values.artistname,\n\t\t\t\t\t\t\t\"image\": ImgHash,\n\t\t\t\t\t\t\t\"description\":values.description\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'pinata_api_key': `${process.env.REACT_APP_PINATA_API_KEY}`,\n\t\t\t\t\t\t\t'pinata_secret_api_key': `${process.env.REACT_APP_PINATA_API_SECRET}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tconsole.log('resJSON', resJSON)\n\t\t\t\t\tconsole.log(\"final \", `ipfs://${resJSON.data.IpfsHash}`)\n\t\t\t\t\tconst tokenURI = `ipfs://${resJSON.data.IpfsHash}`;\n\t\t\t\t\tconsole.log(\"Token URI\", tokenURI);\n\t\t\t\t\t// console.log(contractss);\n\t\t\t\t\tconst trx=await nftcontract.safeMint(tokenURI);\n\t\t\t\t\tawait trx.wait();\n\t\t\t\t\tconsole.log(\"minted successfully\");\n\t\t\t\t\talert(`NFT Minted successfully ${trx.hash}`);\n\t\t\t\t\tcreateNftAction({tokenURI})\n\t\t\t\t\t\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(\"JSON to IPFS: errrrrrrrrrrrrrrrr\")\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}\t\n\t\t\t}\n\n\t\t\tif(values.coverImage){\n\t\t\t  try{\n\t\t\t\t\tconst formData =new FormData();\n\t\t\t\t\tformData.append(\"file\",values.coverImage)\n\t\t\n\t\t\t\t\tconst resFile =\tawait axios({\n\t\t\t\t\t\tmethod: \"post\",\n\t\t\t\t\t\t\turl: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n\t\t\t\t\t\t\tdata: formData,\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'pinata_api_key': `${process.env.REACT_APP_PINATA_API_KEY}`,\n\t\t\t\t\t\t\t\t'pinata_secret_api_key': `${process.env.REACT_APP_PINATA_API_SECRET}`,\n\t\t\t\t\t\t\t\t\"Content-Type\": \"multipart/form-data\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\tconsole.log(\"resFile\",resFile.data.IpfsHash)\n\t\t\t\t\tconst ImgHash = `ipfs://${resFile.data.IpfsHash}`;\n\t\t\t\t\tconsole.log('ImgHash', ImgHash)\n\t\t\t\t\tsendJSONtoIPFS(ImgHash)\n\n\t\t\t\t}\n\t\t\t\tcatch(e){\n\t\t\t\t\tconsole.log(\"e--\",e)\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\n            resetState(helpers)\n\n\t\t},\n\t});\n\n    const onCoverImageChange = (e) => {\n\t\tcoverImage && URL.revokeObjectURL(coverImage);\n\t\tsetCoverImage(URL.createObjectURL(e?.target?.files[0]));\n\t\tformik.values.coverImage = e.target.files[0];\n\t};\n\n    return {\n\t\tformik,\n\t\tcoverImage,\n        onCoverImageChange,\n\t\tsetButtonStatus,\n\t\tbuttonStatus,\n        resetState\n\t};\n}","// web3Config.js\nimport abi from 'abi/ERC721Contract.json'\nimport { ethers } from 'ethers';\nimport React, { useState ,useEffect} from 'react';\nimport marketplaceabi from 'abi/marketplace.json'\n// Initialize your web3 connection\nconst marketplaceaddress='0xBA01432F68fcA69a27159178760A96b447F8Ec1F';\nconst nftcontractaddress = '0x58D1013a33e27D71B9Edb6C832eC839A0d44d395';\nconst contractabi = abi.abi;\nconst { ethereum } = window;\nconst provider = new ethers.providers.Web3Provider(ethereum);\nconst signer = provider.getSigner();\nconst nftcontract = new ethers.Contract(nftcontractaddress, contractabi,signer);\nconst marketplacecontractabi = marketplaceabi.abi;\nconst marketplaceContract=new ethers.Contract(marketplaceaddress, marketplacecontractabi,signer);\n\nexport { nftcontract, marketplaceContract,marketplaceaddress ,nftcontractaddress};\n"],"names":["web3NftContract","_ref","address","chainId","abi","contractAddress","isMetaMaskInstalled","Web3","window","ethereum","HttpProvider","RPC_URLS","eth","Contract","getWeb3Contract","NFT","createNftAction","createAsyncThunk","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","NftCreate","wrap","_context","prev","next","getState","rejectWithValue","dispatch","console","log","e","stop","_x","_x2","apply","arguments","_useIgoApply","navigate","useNavigate","_useState","useWeb3React","active","useState","_useState2","_slicedToArray","coverImage","setCoverImage","_useState3","currentBtnText","disabled","_useState4","buttonStatus","setButtonStatus","resetState","helpers","resetForm","_useState5","Yup","message","requiredWidth","requiredHeight","this","test","value","path","createError","imgDimensions","abrupt","imageWithAndHeight","sent","width","concat","height","_useState6","_useState7","_useState8","_useState9","_useState10","formik","useFormik","initialValues","nftname","artistname","description","validationSchema","required","size","SUPPORTED_FORMATS","includes","type","onSubmit","_onSubmit","_callee3","values","sendJSONtoIPFS","formData","resFile","ImgHash","_context3","_callee2","resJSON","tokenURI","trx","_context2","axios","method","url","headers","process","IpfsHash","nftcontract","safeMint","wait","alert","hash","t0","_x4","FormData","append","_x3","onCoverImageChange","_e$target","URL","revokeObjectURL","createObjectURL","target","files","useIgoApply","_jsx","_Fragment","children","_jsxs","Box","className","noValidate","handleSubmit","accept","name","onChange","onBlur","handleBlur","src","alt","stroke","fill","viewBox","d","strokeWidth","strokeLinecap","strokeLinejoin","htmlFor","Boolean","touched","errors","id","placeholder","handleChange","itemname","rows","marketplaceaddress","nftcontractaddress","contractabi","signer","ethers","getSigner","marketplacecontractabi","marketplaceabi","marketplaceContract"],"sourceRoot":""}