{"version":3,"file":"static/js/998.ea8b34d0.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/abi/src.ts/_version.ts","../node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts","../node_modules/@ethersproject/abi/src.ts/coders/address.ts","../node_modules/@ethersproject/abi/src.ts/coders/anonymous.ts","../node_modules/@ethersproject/abi/src.ts/coders/array.ts","../node_modules/@ethersproject/abi/src.ts/coders/boolean.ts","../node_modules/@ethersproject/abi/src.ts/coders/bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/fixed-bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/null.ts","../node_modules/@ethersproject/abi/src.ts/coders/number.ts","../node_modules/@ethersproject/abi/src.ts/coders/string.ts","../node_modules/@ethersproject/abi/src.ts/coders/tuple.ts","../node_modules/@ethersproject/abi/src.ts/fragments.ts","../node_modules/@ethersproject/abi/src.ts/abi-coder.ts","../node_modules/@ethersproject/abi/src.ts/interface.ts","../node_modules/@ethersproject/contracts/src.ts/index.ts","../node_modules/@ethersproject/contracts/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/index.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const version = \"abi/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, value: boolean): number {\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n\n","\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\n\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n\n\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    readonly size: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, value: BytesLike): number {\n        let data = arrayify(value);\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes([ ]);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n","\"use strict\";\n\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Reader, Writer } from \"./abstract-coder\";\nimport { DynamicBytesCoder } from \"./bytes\";\n\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\n\nexport class TupleCoder extends Coder {\n    readonly coders: Array<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, value: Array<any> | { [ name: string ]: any }): number {\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = (<EventFragment>eventFragment).inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n","\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter | string, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n","export const version = \"contracts/5.7.0\";\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["version","logger","Logger","Coder","name","type","localName","dynamic","_classCallCheck","this","_createClass","key","value","message","throwArgumentError","Writer","wordSize","defineReadOnly","_data","_dataLength","_padding","Uint8Array","get","hexConcat","data","push","length","writer","_writeData","concat","bytes","arrayify","paddingOffset","slice","BigNumber","from","throwError","errors","BUFFER_OVERRUN","offset","_getValue","_this","Reader","coerceFunc","allowLoose","_offset","hexlify","_coerceFunc","coerce","loose","alignedLength","Math","ceil","_peekBytes","readBytes","match","parseInt","toNumber","AddressCoder","_Coder","_inherits","_super","_createSuper","call","getAddress","error","_throwError","writeValue","reader","hexZeroPad","readValue","toHexString","AnonymousCoder","coder","undefined","defaultValue","encode","decode","pack","coders","values","arrayValues","Array","isArray","unique","map","INVALID_ARGUMENT","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","writeUpdatableValue","baseOffset","func","appendWriter","unpack","baseReader","subReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","_loop","i","freeze","ArrayCoder","defaultChild","result","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","writeBytes","BytesCoder","_DynamicBytesCoder","_super2","_get","_getPrototypeOf","prototype","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","MaxUint256","mask","bounds","gt","lt","add","One","mul","NegativeOne","Zero","toTwos","fromTwos","StringCoder","toUtf8Bytes","toUtf8String","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","object","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","UNSUPPORTED_OPERATION","operation","arrayLength","arrayChildren","fromObject","components","_isParamType","format","indexed","comp","JSON","parse","stringify","allowIndexed","fromString","isParamType","verifyType","node","param","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","_Fragment","apply","arguments","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","_Fragment2","isConstructorFragment","parens","_ConstructorFragment","_super3","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","_Fragment3","_super4","isErrorFragment","regexIdentifier","paramTypeBytes","paramTypeNumber","defaultAbiCoder","AbiCoder","_getCoder","component","_getWordSize","_this2","_this3","_getWriter","_this4","_getReader","LogDescription","_Description","Description","TransactionDescription","_Description2","ErrorDescription","_Description3","Indexed","_Description4","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","getStatic","constructor","bucket","deploy","functions","events","j","nameOrSignatureOrSighash","isHexString","getSighash","matching","keys","f","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getFunction","getError","_","eventFragment","getEvent","_abiCoder","_encodeParams","_decodeParams","functionFragment","errorArgs","errorName","errorSignature","selector","builtin","CALL_EXCEPTION","method","UNEXPECTED_ARGUMENT","topics","encodeTopic","id","keccak256","pop","dataTypes","dataValues","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","tx","args","topic","decodeEventLog","hexData","errorFragment","address","hexDataSlice","_isInterface","resolveName","resolver","nameOrPromise","_context","sent","prev","abrupt","t0","next","stop","_callee","resolveAddresses","paramType","_context2","Promise","all","reject","makeError","_callee2","populateTransaction","contract","overrides","shallowCopy","signer","resolveProperties","override","then","check","__awaiter","_regeneratorRuntime","mark","_callee3","_context3","provider","_context4","resolvedAddress","resolved","interface","encodeFunctionData","to","ro","nonce","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","accessList","accessListify","intrinsic","roValue","customData","ccipReadEnabled","leftovers","l","_callee4","addContractWait","wait","bind","confirmations","receipt","logs","event","deepCopy","parsed","parseLog","e","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","signerOrProvider","_len3","_key3","blockTag","_context6","deployTransaction","_deployed","decodeFunctionResult","transaction","_callee6","buildDefault","_len4","_key4","_context7","txRequest","sendTransaction","_callee7","buildSend","getEventTag","RunningEvent","tag","_listeners","listener","once","done","item","listenerCount","argsCopy","setTimeout","ErrorRunningEvent","_RunningEvent","FragmentRunningEvent","_RunningEvent2","contractInterface","_assertThisInitialized","decodeError","checkErrors","path","childPath","checkResultErrors","WildcardRunningEvent","_RunningEvent3","_this5","_this6","BaseContract","addressOrName","_this7","Signer","isSigner","Provider","isProvider","uniqueFilters","filters","_len5","_key5","encodeFilterTopics","catch","uniqueSignatures","callStatic","_len","_key","buildPopulate","estimateGas","_len2","_key2","_context5","_callee5","buildEstimate","signatures","_this8","_deployedPromise","getCode","contractAddress","_this9","deployed","VoidSigner","runningEvent","_runningEvents","eventName","_normalizeRunningEvent","emit","_wrappedEmits","off","_this10","_checkRunningEvents","prepareEvent","_this11","addListener","wrappedEmit","_wrapEvent","getEmit","_toConsumableArray","on","fromBlockOrBlockhash","toBlock","_this12","_getRunningEvent","fromBlock","getLogs","_addEventListener","_len6","_key6","run","_this13","listeners","removeAllListeners","getContractAddress","isInterface","isIndexed","Contract","_BaseContract","asyncGeneratorStep","gen","_next","_throw","arg","info","_asyncToGenerator","fn","self","err"],"sourceRoot":""}